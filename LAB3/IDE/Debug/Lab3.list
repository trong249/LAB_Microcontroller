
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002918  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002a24  08002a24  00012a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a44  08002a44  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a44  08002a44  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a44  08002a44  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a44  08002a44  00012a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a48  08002a48  00012a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000002c  08002a78  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08002a78  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000973a  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bbd  00000000  00000000  0002978f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002b350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002bdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a99  00000000  00000000  0002c748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b943  00000000  00000000  000431e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081ed0  00000000  00000000  0004eb24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d09f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002974  00000000  00000000  000d0a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a0c 	.word	0x08002a0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	08002a0c 	.word	0x08002a0c

0800014c <_7SEG_N>:
 *
 *  Created on: Oct 6, 2021
 *      Author: win 10
 */
#include "main.h"
void _7SEG_N(int num){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if ( num==0 ) {
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b00      	cmp	r3, #0
 8000158:	d109      	bne.n	800016e <_7SEG_N+0x22>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5,0 );
 800015a:	2200      	movs	r2, #0
 800015c:	213f      	movs	r1, #63	; 0x3f
 800015e:	4842      	ldr	r0, [pc, #264]	; (8000268 <_7SEG_N+0x11c>)
 8000160:	f001 fc2b 	bl	80019ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,1 );
 8000164:	2201      	movs	r2, #1
 8000166:	2140      	movs	r1, #64	; 0x40
 8000168:	483f      	ldr	r0, [pc, #252]	; (8000268 <_7SEG_N+0x11c>)
 800016a:	f001 fc26 	bl	80019ba <HAL_GPIO_WritePin>
	}
	if ( num==1 ) {
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	2b01      	cmp	r3, #1
 8000172:	d109      	bne.n	8000188 <_7SEG_N+0x3c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, 1 );
 8000174:	2201      	movs	r2, #1
 8000176:	2179      	movs	r1, #121	; 0x79
 8000178:	483b      	ldr	r0, [pc, #236]	; (8000268 <_7SEG_N+0x11c>)
 800017a:	f001 fc1e 	bl	80019ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, 0 );
 800017e:	2200      	movs	r2, #0
 8000180:	2106      	movs	r1, #6
 8000182:	4839      	ldr	r0, [pc, #228]	; (8000268 <_7SEG_N+0x11c>)
 8000184:	f001 fc19 	bl	80019ba <HAL_GPIO_WritePin>
	}
	if ( num==2 ) {
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	2b02      	cmp	r3, #2
 800018c:	d109      	bne.n	80001a2 <_7SEG_N+0x56>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6,0 );
 800018e:	2200      	movs	r2, #0
 8000190:	215b      	movs	r1, #91	; 0x5b
 8000192:	4835      	ldr	r0, [pc, #212]	; (8000268 <_7SEG_N+0x11c>)
 8000194:	f001 fc11 	bl	80019ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5,1 );
 8000198:	2201      	movs	r2, #1
 800019a:	2124      	movs	r1, #36	; 0x24
 800019c:	4832      	ldr	r0, [pc, #200]	; (8000268 <_7SEG_N+0x11c>)
 800019e:	f001 fc0c 	bl	80019ba <HAL_GPIO_WritePin>
	}
	if ( num==3 ) {
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	2b03      	cmp	r3, #3
 80001a6:	d109      	bne.n	80001bc <_7SEG_N+0x70>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6,0 );
 80001a8:	2200      	movs	r2, #0
 80001aa:	214f      	movs	r1, #79	; 0x4f
 80001ac:	482e      	ldr	r0, [pc, #184]	; (8000268 <_7SEG_N+0x11c>)
 80001ae:	f001 fc04 	bl	80019ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5,1 );
 80001b2:	2201      	movs	r2, #1
 80001b4:	2130      	movs	r1, #48	; 0x30
 80001b6:	482c      	ldr	r0, [pc, #176]	; (8000268 <_7SEG_N+0x11c>)
 80001b8:	f001 fbff 	bl	80019ba <HAL_GPIO_WritePin>
	}
	if ( num==4 ) {
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	2b04      	cmp	r3, #4
 80001c0:	d109      	bne.n	80001d6 <_7SEG_N+0x8a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6,0 );
 80001c2:	2200      	movs	r2, #0
 80001c4:	2166      	movs	r1, #102	; 0x66
 80001c6:	4828      	ldr	r0, [pc, #160]	; (8000268 <_7SEG_N+0x11c>)
 80001c8:	f001 fbf7 	bl	80019ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4,1 );
 80001cc:	2201      	movs	r2, #1
 80001ce:	2119      	movs	r1, #25
 80001d0:	4825      	ldr	r0, [pc, #148]	; (8000268 <_7SEG_N+0x11c>)
 80001d2:	f001 fbf2 	bl	80019ba <HAL_GPIO_WritePin>
	}
	if ( num==5 ) {
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	2b05      	cmp	r3, #5
 80001da:	d109      	bne.n	80001f0 <_7SEG_N+0xa4>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6,0 );
 80001dc:	2200      	movs	r2, #0
 80001de:	216d      	movs	r1, #109	; 0x6d
 80001e0:	4821      	ldr	r0, [pc, #132]	; (8000268 <_7SEG_N+0x11c>)
 80001e2:	f001 fbea 	bl	80019ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_4,1);
 80001e6:	2201      	movs	r2, #1
 80001e8:	2112      	movs	r1, #18
 80001ea:	481f      	ldr	r0, [pc, #124]	; (8000268 <_7SEG_N+0x11c>)
 80001ec:	f001 fbe5 	bl	80019ba <HAL_GPIO_WritePin>
	}
	if ( num==6 ) {
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	2b06      	cmp	r3, #6
 80001f4:	d109      	bne.n	800020a <_7SEG_N+0xbe>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6,0 );
 80001f6:	2200      	movs	r2, #0
 80001f8:	217d      	movs	r1, #125	; 0x7d
 80001fa:	481b      	ldr	r0, [pc, #108]	; (8000268 <_7SEG_N+0x11c>)
 80001fc:	f001 fbdd 	bl	80019ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,1 );
 8000200:	2201      	movs	r2, #1
 8000202:	2102      	movs	r1, #2
 8000204:	4818      	ldr	r0, [pc, #96]	; (8000268 <_7SEG_N+0x11c>)
 8000206:	f001 fbd8 	bl	80019ba <HAL_GPIO_WritePin>
	}
	if ( num==7 ) {
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2b07      	cmp	r3, #7
 800020e:	d109      	bne.n	8000224 <_7SEG_N+0xd8>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2,0 );
 8000210:	2200      	movs	r2, #0
 8000212:	2107      	movs	r1, #7
 8000214:	4814      	ldr	r0, [pc, #80]	; (8000268 <_7SEG_N+0x11c>)
 8000216:	f001 fbd0 	bl	80019ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6,1 );
 800021a:	2201      	movs	r2, #1
 800021c:	2178      	movs	r1, #120	; 0x78
 800021e:	4812      	ldr	r0, [pc, #72]	; (8000268 <_7SEG_N+0x11c>)
 8000220:	f001 fbcb 	bl	80019ba <HAL_GPIO_WritePin>
	}
	if ( num==8 ) {
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	2b08      	cmp	r3, #8
 8000228:	d104      	bne.n	8000234 <_7SEG_N+0xe8>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6,0 );
 800022a:	2200      	movs	r2, #0
 800022c:	217f      	movs	r1, #127	; 0x7f
 800022e:	480e      	ldr	r0, [pc, #56]	; (8000268 <_7SEG_N+0x11c>)
 8000230:	f001 fbc3 	bl	80019ba <HAL_GPIO_WritePin>
	}
	if ( num==9 ) {
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2b09      	cmp	r3, #9
 8000238:	d109      	bne.n	800024e <_7SEG_N+0x102>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6,0 );
 800023a:	2200      	movs	r2, #0
 800023c:	216f      	movs	r1, #111	; 0x6f
 800023e:	480a      	ldr	r0, [pc, #40]	; (8000268 <_7SEG_N+0x11c>)
 8000240:	f001 fbbb 	bl	80019ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,1 );
 8000244:	2201      	movs	r2, #1
 8000246:	2110      	movs	r1, #16
 8000248:	4807      	ldr	r0, [pc, #28]	; (8000268 <_7SEG_N+0x11c>)
 800024a:	f001 fbb6 	bl	80019ba <HAL_GPIO_WritePin>
	}
	if(num==-1){
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000254:	d104      	bne.n	8000260 <_7SEG_N+0x114>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6,1 );
 8000256:	2201      	movs	r2, #1
 8000258:	217f      	movs	r1, #127	; 0x7f
 800025a:	4803      	ldr	r0, [pc, #12]	; (8000268 <_7SEG_N+0x11c>)
 800025c:	f001 fbad 	bl	80019ba <HAL_GPIO_WritePin>
	}
}
 8000260:	bf00      	nop
 8000262:	3708      	adds	r7, #8
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	40010c00 	.word	0x40010c00

0800026c <_7SEG_D>:

void _7SEG_D(int num){
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	if ( num==0 ) {
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d10b      	bne.n	8000292 <_7SEG_D+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12,0 );
 800027a:	2200      	movs	r2, #0
 800027c:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 8000280:	484b      	ldr	r0, [pc, #300]	; (80003b0 <_7SEG_D+0x144>)
 8000282:	f001 fb9a 	bl	80019ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,1 );
 8000286:	2201      	movs	r2, #1
 8000288:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800028c:	4848      	ldr	r0, [pc, #288]	; (80003b0 <_7SEG_D+0x144>)
 800028e:	f001 fb94 	bl	80019ba <HAL_GPIO_WritePin>
	}
	if ( num==1 ) {
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	2b01      	cmp	r3, #1
 8000296:	d10b      	bne.n	80002b0 <_7SEG_D+0x44>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, 1 );
 8000298:	2201      	movs	r2, #1
 800029a:	f44f 5172 	mov.w	r1, #15488	; 0x3c80
 800029e:	4844      	ldr	r0, [pc, #272]	; (80003b0 <_7SEG_D+0x144>)
 80002a0:	f001 fb8b 	bl	80019ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, 0 );
 80002a4:	2200      	movs	r2, #0
 80002a6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80002aa:	4841      	ldr	r0, [pc, #260]	; (80003b0 <_7SEG_D+0x144>)
 80002ac:	f001 fb85 	bl	80019ba <HAL_GPIO_WritePin>
	}
	if ( num==2 ) {
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2b02      	cmp	r3, #2
 80002b4:	d10b      	bne.n	80002ce <_7SEG_D+0x62>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13,0 );
 80002b6:	2200      	movs	r2, #0
 80002b8:	f44f 5136 	mov.w	r1, #11648	; 0x2d80
 80002bc:	483c      	ldr	r0, [pc, #240]	; (80003b0 <_7SEG_D+0x144>)
 80002be:	f001 fb7c 	bl	80019ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9|GPIO_PIN_12,1 );
 80002c2:	2201      	movs	r2, #1
 80002c4:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 80002c8:	4839      	ldr	r0, [pc, #228]	; (80003b0 <_7SEG_D+0x144>)
 80002ca:	f001 fb76 	bl	80019ba <HAL_GPIO_WritePin>
	}
	if ( num==3 ) {
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2b03      	cmp	r3, #3
 80002d2:	d10b      	bne.n	80002ec <_7SEG_D+0x80>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13,0 );
 80002d4:	2200      	movs	r2, #0
 80002d6:	f44f 511e 	mov.w	r1, #10112	; 0x2780
 80002da:	4835      	ldr	r0, [pc, #212]	; (80003b0 <_7SEG_D+0x144>)
 80002dc:	f001 fb6d 	bl	80019ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12,1 );
 80002e0:	2201      	movs	r2, #1
 80002e2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80002e6:	4832      	ldr	r0, [pc, #200]	; (80003b0 <_7SEG_D+0x144>)
 80002e8:	f001 fb67 	bl	80019ba <HAL_GPIO_WritePin>
	}
	if ( num==4 ) {
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2b04      	cmp	r3, #4
 80002f0:	d10b      	bne.n	800030a <_7SEG_D+0x9e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13,0 );
 80002f2:	2200      	movs	r2, #0
 80002f4:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 80002f8:	482d      	ldr	r0, [pc, #180]	; (80003b0 <_7SEG_D+0x144>)
 80002fa:	f001 fb5e 	bl	80019ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11,1 );
 80002fe:	2201      	movs	r2, #1
 8000300:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8000304:	482a      	ldr	r0, [pc, #168]	; (80003b0 <_7SEG_D+0x144>)
 8000306:	f001 fb58 	bl	80019ba <HAL_GPIO_WritePin>
	}
	if ( num==5 ) {
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	2b05      	cmp	r3, #5
 800030e:	d10b      	bne.n	8000328 <_7SEG_D+0xbc>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13,0 );
 8000310:	2200      	movs	r2, #0
 8000312:	f44f 515a 	mov.w	r1, #13952	; 0x3680
 8000316:	4826      	ldr	r0, [pc, #152]	; (80003b0 <_7SEG_D+0x144>)
 8000318:	f001 fb4f 	bl	80019ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_11,1);
 800031c:	2201      	movs	r2, #1
 800031e:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8000322:	4823      	ldr	r0, [pc, #140]	; (80003b0 <_7SEG_D+0x144>)
 8000324:	f001 fb49 	bl	80019ba <HAL_GPIO_WritePin>
	}
	if ( num==6 ) {
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2b06      	cmp	r3, #6
 800032c:	d10b      	bne.n	8000346 <_7SEG_D+0xda>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13,0 );
 800032e:	2200      	movs	r2, #0
 8000330:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8000334:	481e      	ldr	r0, [pc, #120]	; (80003b0 <_7SEG_D+0x144>)
 8000336:	f001 fb40 	bl	80019ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1 );
 800033a:	2201      	movs	r2, #1
 800033c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000340:	481b      	ldr	r0, [pc, #108]	; (80003b0 <_7SEG_D+0x144>)
 8000342:	f001 fb3a 	bl	80019ba <HAL_GPIO_WritePin>
	}
	if ( num==7 ) {
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2b07      	cmp	r3, #7
 800034a:	d10b      	bne.n	8000364 <_7SEG_D+0xf8>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9,0 );
 800034c:	2200      	movs	r2, #0
 800034e:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000352:	4817      	ldr	r0, [pc, #92]	; (80003b0 <_7SEG_D+0x144>)
 8000354:	f001 fb31 	bl	80019ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13,1 );
 8000358:	2201      	movs	r2, #1
 800035a:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 800035e:	4814      	ldr	r0, [pc, #80]	; (80003b0 <_7SEG_D+0x144>)
 8000360:	f001 fb2b 	bl	80019ba <HAL_GPIO_WritePin>
	}
	if ( num==8 ) {
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2b08      	cmp	r3, #8
 8000368:	d105      	bne.n	8000376 <_7SEG_D+0x10a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13,0 );
 800036a:	2200      	movs	r2, #0
 800036c:	f44f 517e 	mov.w	r1, #16256	; 0x3f80
 8000370:	480f      	ldr	r0, [pc, #60]	; (80003b0 <_7SEG_D+0x144>)
 8000372:	f001 fb22 	bl	80019ba <HAL_GPIO_WritePin>
	}
	if ( num==9 ) {
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	2b09      	cmp	r3, #9
 800037a:	d10b      	bne.n	8000394 <_7SEG_D+0x128>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13,0 );
 800037c:	2200      	movs	r2, #0
 800037e:	f44f 515e 	mov.w	r1, #14208	; 0x3780
 8000382:	480b      	ldr	r0, [pc, #44]	; (80003b0 <_7SEG_D+0x144>)
 8000384:	f001 fb19 	bl	80019ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11,1 );
 8000388:	2201      	movs	r2, #1
 800038a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800038e:	4808      	ldr	r0, [pc, #32]	; (80003b0 <_7SEG_D+0x144>)
 8000390:	f001 fb13 	bl	80019ba <HAL_GPIO_WritePin>
	}
	if ( num==-1 ) {
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800039a:	d105      	bne.n	80003a8 <_7SEG_D+0x13c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13,1 );
 800039c:	2201      	movs	r2, #1
 800039e:	f44f 517e 	mov.w	r1, #16256	; 0x3f80
 80003a2:	4803      	ldr	r0, [pc, #12]	; (80003b0 <_7SEG_D+0x144>)
 80003a4:	f001 fb09 	bl	80019ba <HAL_GPIO_WritePin>
	}
}
 80003a8:	bf00      	nop
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40010c00 	.word	0x40010c00

080003b4 <display_1st_2SEG>:



enum LightState{RED,YELLOW,GREEN};
//Xử lí 2 led 7 doan thứ nhất
void display_1st_2SEG(int num){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
	if(num==-1){
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003c2:	d103      	bne.n	80003cc <display_1st_2SEG+0x18>
		_7SEG_D(-1);
 80003c4:	f04f 30ff 	mov.w	r0, #4294967295
 80003c8:	f7ff ff50 	bl	800026c <_7SEG_D>
	}
	if (num>=1 && num<=9){
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	dd30      	ble.n	8000434 <display_1st_2SEG+0x80>
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2b09      	cmp	r3, #9
 80003d6:	dc2d      	bgt.n	8000434 <display_1st_2SEG+0x80>
		int flag =flag_timer_7SEG();
 80003d8:	f000 ff92 	bl	8001300 <flag_timer_7SEG>
 80003dc:	6178      	str	r0, [r7, #20]
		if( flag == 3){
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	2b03      	cmp	r3, #3
 80003e2:	d10e      	bne.n	8000402 <display_1st_2SEG+0x4e>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80003e4:	2200      	movs	r2, #0
 80003e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ea:	4837      	ldr	r0, [pc, #220]	; (80004c8 <display_1st_2SEG+0x114>)
 80003ec:	f001 fae5 	bl	80019ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 80003f0:	2201      	movs	r2, #1
 80003f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003f6:	4834      	ldr	r0, [pc, #208]	; (80004c8 <display_1st_2SEG+0x114>)
 80003f8:	f001 fadf 	bl	80019ba <HAL_GPIO_WritePin>
			_7SEG_D(0);
 80003fc:	2000      	movs	r0, #0
 80003fe:	f7ff ff35 	bl	800026c <_7SEG_D>
		}
		if( flag == 2) {
 8000402:	697b      	ldr	r3, [r7, #20]
 8000404:	2b02      	cmp	r3, #2
 8000406:	d10e      	bne.n	8000426 <display_1st_2SEG+0x72>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000408:	2201      	movs	r2, #1
 800040a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800040e:	482e      	ldr	r0, [pc, #184]	; (80004c8 <display_1st_2SEG+0x114>)
 8000410:	f001 fad3 	bl	80019ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8000414:	2200      	movs	r2, #0
 8000416:	f44f 7100 	mov.w	r1, #512	; 0x200
 800041a:	482b      	ldr	r0, [pc, #172]	; (80004c8 <display_1st_2SEG+0x114>)
 800041c:	f001 facd 	bl	80019ba <HAL_GPIO_WritePin>
			_7SEG_D(num);
 8000420:	6878      	ldr	r0, [r7, #4]
 8000422:	f7ff ff23 	bl	800026c <_7SEG_D>
		}
		if( flag == 1){
 8000426:	697b      	ldr	r3, [r7, #20]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d103      	bne.n	8000434 <display_1st_2SEG+0x80>
			setTimer_7SEG(500) ;
 800042c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000430:	f000 ff22 	bl	8001278 <setTimer_7SEG>
		}
	}
	if ( num>9 ){
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	2b09      	cmp	r3, #9
 8000438:	dd42      	ble.n	80004c0 <display_1st_2SEG+0x10c>
		int flag =flag_timer_7SEG();
 800043a:	f000 ff61 	bl	8001300 <flag_timer_7SEG>
 800043e:	6138      	str	r0, [r7, #16]
		int chuc=num/10;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a22      	ldr	r2, [pc, #136]	; (80004cc <display_1st_2SEG+0x118>)
 8000444:	fb82 1203 	smull	r1, r2, r2, r3
 8000448:	1092      	asrs	r2, r2, #2
 800044a:	17db      	asrs	r3, r3, #31
 800044c:	1ad3      	subs	r3, r2, r3
 800044e:	60fb      	str	r3, [r7, #12]
		int donvi=num%10;
 8000450:	687a      	ldr	r2, [r7, #4]
 8000452:	4b1e      	ldr	r3, [pc, #120]	; (80004cc <display_1st_2SEG+0x118>)
 8000454:	fb83 1302 	smull	r1, r3, r3, r2
 8000458:	1099      	asrs	r1, r3, #2
 800045a:	17d3      	asrs	r3, r2, #31
 800045c:	1ac9      	subs	r1, r1, r3
 800045e:	460b      	mov	r3, r1
 8000460:	009b      	lsls	r3, r3, #2
 8000462:	440b      	add	r3, r1
 8000464:	005b      	lsls	r3, r3, #1
 8000466:	1ad3      	subs	r3, r2, r3
 8000468:	60bb      	str	r3, [r7, #8]
		if( flag == 3){
 800046a:	693b      	ldr	r3, [r7, #16]
 800046c:	2b03      	cmp	r3, #3
 800046e:	d10e      	bne.n	800048e <display_1st_2SEG+0xda>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000470:	2200      	movs	r2, #0
 8000472:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000476:	4814      	ldr	r0, [pc, #80]	; (80004c8 <display_1st_2SEG+0x114>)
 8000478:	f001 fa9f 	bl	80019ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 800047c:	2201      	movs	r2, #1
 800047e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000482:	4811      	ldr	r0, [pc, #68]	; (80004c8 <display_1st_2SEG+0x114>)
 8000484:	f001 fa99 	bl	80019ba <HAL_GPIO_WritePin>
			_7SEG_D(chuc);
 8000488:	68f8      	ldr	r0, [r7, #12]
 800048a:	f7ff feef 	bl	800026c <_7SEG_D>
		}
		if( flag == 2) {
 800048e:	693b      	ldr	r3, [r7, #16]
 8000490:	2b02      	cmp	r3, #2
 8000492:	d10e      	bne.n	80004b2 <display_1st_2SEG+0xfe>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000494:	2201      	movs	r2, #1
 8000496:	f44f 7180 	mov.w	r1, #256	; 0x100
 800049a:	480b      	ldr	r0, [pc, #44]	; (80004c8 <display_1st_2SEG+0x114>)
 800049c:	f001 fa8d 	bl	80019ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 80004a0:	2200      	movs	r2, #0
 80004a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a6:	4808      	ldr	r0, [pc, #32]	; (80004c8 <display_1st_2SEG+0x114>)
 80004a8:	f001 fa87 	bl	80019ba <HAL_GPIO_WritePin>
			_7SEG_D(donvi);
 80004ac:	68b8      	ldr	r0, [r7, #8]
 80004ae:	f7ff fedd 	bl	800026c <_7SEG_D>
		}
		if( flag == 1){
 80004b2:	693b      	ldr	r3, [r7, #16]
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d103      	bne.n	80004c0 <display_1st_2SEG+0x10c>
			setTimer_7SEG(500) ;
 80004b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004bc:	f000 fedc 	bl	8001278 <setTimer_7SEG>
		}
	}
}
 80004c0:	bf00      	nop
 80004c2:	3718      	adds	r7, #24
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40010800 	.word	0x40010800
 80004cc:	66666667 	.word	0x66666667

080004d0 <display_2nd_2SEG>:
//Xử lí 2 led 7 đoạn thứ 2
void display_2nd_2SEG(int num){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	if(num==-1){
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004de:	d103      	bne.n	80004e8 <display_2nd_2SEG+0x18>
			_7SEG_N(-1);
 80004e0:	f04f 30ff 	mov.w	r0, #4294967295
 80004e4:	f7ff fe32 	bl	800014c <_7SEG_N>
		}
		if (num>=1 && num<=9){
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	dd2c      	ble.n	8000548 <display_2nd_2SEG+0x78>
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2b09      	cmp	r3, #9
 80004f2:	dc29      	bgt.n	8000548 <display_2nd_2SEG+0x78>
			int flag =flag_timer_7SEG();
 80004f4:	f000 ff04 	bl	8001300 <flag_timer_7SEG>
 80004f8:	6178      	str	r0, [r7, #20]
			if( flag == 3){
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	2b03      	cmp	r3, #3
 80004fe:	d10c      	bne.n	800051a <display_2nd_2SEG+0x4a>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000500:	2200      	movs	r2, #0
 8000502:	2140      	movs	r1, #64	; 0x40
 8000504:	4833      	ldr	r0, [pc, #204]	; (80005d4 <display_2nd_2SEG+0x104>)
 8000506:	f001 fa58 	bl	80019ba <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 800050a:	2201      	movs	r2, #1
 800050c:	2180      	movs	r1, #128	; 0x80
 800050e:	4831      	ldr	r0, [pc, #196]	; (80005d4 <display_2nd_2SEG+0x104>)
 8000510:	f001 fa53 	bl	80019ba <HAL_GPIO_WritePin>
				_7SEG_N(0);
 8000514:	2000      	movs	r0, #0
 8000516:	f7ff fe19 	bl	800014c <_7SEG_N>
			}
			if( flag == 2) {
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	2b02      	cmp	r3, #2
 800051e:	d10c      	bne.n	800053a <display_2nd_2SEG+0x6a>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000520:	2201      	movs	r2, #1
 8000522:	2140      	movs	r1, #64	; 0x40
 8000524:	482b      	ldr	r0, [pc, #172]	; (80005d4 <display_2nd_2SEG+0x104>)
 8000526:	f001 fa48 	bl	80019ba <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 800052a:	2200      	movs	r2, #0
 800052c:	2180      	movs	r1, #128	; 0x80
 800052e:	4829      	ldr	r0, [pc, #164]	; (80005d4 <display_2nd_2SEG+0x104>)
 8000530:	f001 fa43 	bl	80019ba <HAL_GPIO_WritePin>
				_7SEG_N(num);
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f7ff fe09 	bl	800014c <_7SEG_N>
			}
			if( flag == 1){
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d103      	bne.n	8000548 <display_2nd_2SEG+0x78>
				setTimer_7SEG(500) ;
 8000540:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000544:	f000 fe98 	bl	8001278 <setTimer_7SEG>
			}
		}
		if ( num>9 ){
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b09      	cmp	r3, #9
 800054c:	dd3e      	ble.n	80005cc <display_2nd_2SEG+0xfc>
			int flag =flag_timer_7SEG();
 800054e:	f000 fed7 	bl	8001300 <flag_timer_7SEG>
 8000552:	6138      	str	r0, [r7, #16]
			int chuc=num/10;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4a20      	ldr	r2, [pc, #128]	; (80005d8 <display_2nd_2SEG+0x108>)
 8000558:	fb82 1203 	smull	r1, r2, r2, r3
 800055c:	1092      	asrs	r2, r2, #2
 800055e:	17db      	asrs	r3, r3, #31
 8000560:	1ad3      	subs	r3, r2, r3
 8000562:	60fb      	str	r3, [r7, #12]
			int donvi=num%10;
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <display_2nd_2SEG+0x108>)
 8000568:	fb83 1302 	smull	r1, r3, r3, r2
 800056c:	1099      	asrs	r1, r3, #2
 800056e:	17d3      	asrs	r3, r2, #31
 8000570:	1ac9      	subs	r1, r1, r3
 8000572:	460b      	mov	r3, r1
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	440b      	add	r3, r1
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	1ad3      	subs	r3, r2, r3
 800057c:	60bb      	str	r3, [r7, #8]
			if( flag == 3){
 800057e:	693b      	ldr	r3, [r7, #16]
 8000580:	2b03      	cmp	r3, #3
 8000582:	d10c      	bne.n	800059e <display_2nd_2SEG+0xce>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000584:	2200      	movs	r2, #0
 8000586:	2140      	movs	r1, #64	; 0x40
 8000588:	4812      	ldr	r0, [pc, #72]	; (80005d4 <display_2nd_2SEG+0x104>)
 800058a:	f001 fa16 	bl	80019ba <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 800058e:	2201      	movs	r2, #1
 8000590:	2180      	movs	r1, #128	; 0x80
 8000592:	4810      	ldr	r0, [pc, #64]	; (80005d4 <display_2nd_2SEG+0x104>)
 8000594:	f001 fa11 	bl	80019ba <HAL_GPIO_WritePin>
				_7SEG_N(chuc);
 8000598:	68f8      	ldr	r0, [r7, #12]
 800059a:	f7ff fdd7 	bl	800014c <_7SEG_N>
			}
			if( flag == 2) {
 800059e:	693b      	ldr	r3, [r7, #16]
 80005a0:	2b02      	cmp	r3, #2
 80005a2:	d10c      	bne.n	80005be <display_2nd_2SEG+0xee>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2140      	movs	r1, #64	; 0x40
 80005a8:	480a      	ldr	r0, [pc, #40]	; (80005d4 <display_2nd_2SEG+0x104>)
 80005aa:	f001 fa06 	bl	80019ba <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2180      	movs	r1, #128	; 0x80
 80005b2:	4808      	ldr	r0, [pc, #32]	; (80005d4 <display_2nd_2SEG+0x104>)
 80005b4:	f001 fa01 	bl	80019ba <HAL_GPIO_WritePin>
				_7SEG_N(donvi);
 80005b8:	68b8      	ldr	r0, [r7, #8]
 80005ba:	f7ff fdc7 	bl	800014c <_7SEG_N>
			}
			if( flag == 1){
 80005be:	693b      	ldr	r3, [r7, #16]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d103      	bne.n	80005cc <display_2nd_2SEG+0xfc>
				setTimer_7SEG(500) ;
 80005c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005c8:	f000 fe56 	bl	8001278 <setTimer_7SEG>
			}
		}

}
 80005cc:	bf00      	nop
 80005ce:	3718      	adds	r7, #24
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40010800 	.word	0x40010800
 80005d8:	66666667 	.word	0x66666667

080005dc <display_TrafficLight>:

//Xử lí hiện thị đèn giao thông ( RED GREEN YELLOW )
void display_TrafficLight(int red, int green, int yellow){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
//MOD=2 RED
	if (red==-1&&green==0&&yellow==0){
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005ee:	d118      	bne.n	8000622 <display_TrafficLight+0x46>
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d115      	bne.n	8000622 <display_TrafficLight+0x46>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d112      	bne.n	8000622 <display_TrafficLight+0x46>
		int flag =flag_timer3();
 80005fc:	f000 fe2c 	bl	8001258 <flag_timer3>
 8000600:	61f8      	str	r0, [r7, #28]
		if( flag == 1){
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d10c      	bne.n	8000622 <display_TrafficLight+0x46>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2|GPIO_PIN_5);
 8000608:	2124      	movs	r1, #36	; 0x24
 800060a:	48a1      	ldr	r0, [pc, #644]	; (8000890 <display_TrafficLight+0x2b4>)
 800060c:	f001 f9ed 	bl	80019ea <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, 1);
 8000610:	2201      	movs	r2, #1
 8000612:	211b      	movs	r1, #27
 8000614:	489e      	ldr	r0, [pc, #632]	; (8000890 <display_TrafficLight+0x2b4>)
 8000616:	f001 f9d0 	bl	80019ba <HAL_GPIO_WritePin>
			setTimer3(500) ;
 800061a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800061e:	f000 fde5 	bl	80011ec <setTimer3>
		}
	}
//	MOD = 3 YELLOW
	if (yellow==-1&&green==0&&red==0){
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000628:	d118      	bne.n	800065c <display_TrafficLight+0x80>
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d115      	bne.n	800065c <display_TrafficLight+0x80>
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d112      	bne.n	800065c <display_TrafficLight+0x80>
		int flag =flag_timer3();
 8000636:	f000 fe0f 	bl	8001258 <flag_timer3>
 800063a:	61b8      	str	r0, [r7, #24]
		if( flag == 1){
 800063c:	69bb      	ldr	r3, [r7, #24]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d10c      	bne.n	800065c <display_TrafficLight+0x80>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4);
 8000642:	2112      	movs	r1, #18
 8000644:	4892      	ldr	r0, [pc, #584]	; (8000890 <display_TrafficLight+0x2b4>)
 8000646:	f001 f9d0 	bl	80019ea <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5, 1);
 800064a:	2201      	movs	r2, #1
 800064c:	212d      	movs	r1, #45	; 0x2d
 800064e:	4890      	ldr	r0, [pc, #576]	; (8000890 <display_TrafficLight+0x2b4>)
 8000650:	f001 f9b3 	bl	80019ba <HAL_GPIO_WritePin>
			setTimer3(500) ;
 8000654:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000658:	f000 fdc8 	bl	80011ec <setTimer3>
		}
	}
//	MOD = 4 GREEN
	if(green==-1&&red==0&&yellow==0){
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000662:	d118      	bne.n	8000696 <display_TrafficLight+0xba>
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d115      	bne.n	8000696 <display_TrafficLight+0xba>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d112      	bne.n	8000696 <display_TrafficLight+0xba>
		int flag =flag_timer3();
 8000670:	f000 fdf2 	bl	8001258 <flag_timer3>
 8000674:	6178      	str	r0, [r7, #20]
		if( flag == 1){
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d10c      	bne.n	8000696 <display_TrafficLight+0xba>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0|GPIO_PIN_3);
 800067c:	2109      	movs	r1, #9
 800067e:	4884      	ldr	r0, [pc, #528]	; (8000890 <display_TrafficLight+0x2b4>)
 8000680:	f001 f9b3 	bl	80019ea <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5, 1);
 8000684:	2201      	movs	r2, #1
 8000686:	2136      	movs	r1, #54	; 0x36
 8000688:	4881      	ldr	r0, [pc, #516]	; (8000890 <display_TrafficLight+0x2b4>)
 800068a:	f001 f996 	bl	80019ba <HAL_GPIO_WritePin>
			setTimer3(500) ;
 800068e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000692:	f000 fdab 	bl	80011ec <setTimer3>
		}
	}

	if ((green+yellow)==red){
 8000696:	68ba      	ldr	r2, [r7, #8]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4413      	add	r3, r2
 800069c:	68fa      	ldr	r2, [r7, #12]
 800069e:	429a      	cmp	r2, r3
 80006a0:	f040 812b 	bne.w	80008fa <display_TrafficLight+0x31e>
		static int time_D=0;
		static int time_N=0;
		static enum LightState state_D=RED;
		static enum LightState state_N=GREEN;
		//	Hiển thị đèn theo chiều doc/////////////////////////////////////////////////////////////
		switch(state_D){
 80006a4:	4b7b      	ldr	r3, [pc, #492]	; (8000894 <display_TrafficLight+0x2b8>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b02      	cmp	r3, #2
 80006aa:	d032      	beq.n	8000712 <display_TrafficLight+0x136>
 80006ac:	2b02      	cmp	r3, #2
 80006ae:	f300 808b 	bgt.w	80007c8 <display_TrafficLight+0x1ec>
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d002      	beq.n	80006bc <display_TrafficLight+0xe0>
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d056      	beq.n	8000768 <display_TrafficLight+0x18c>
 80006ba:	e085      	b.n	80007c8 <display_TrafficLight+0x1ec>
		case RED:  	// RED=On ; YELLOW=Off ; GREEN=Off
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5, 0);
 80006bc:	2200      	movs	r2, #0
 80006be:	2120      	movs	r1, #32
 80006c0:	4873      	ldr	r0, [pc, #460]	; (8000890 <display_TrafficLight+0x2b4>)
 80006c2:	f001 f97a 	bl	80019ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3|GPIO_PIN_4, 1);
 80006c6:	2201      	movs	r2, #1
 80006c8:	2118      	movs	r1, #24
 80006ca:	4871      	ldr	r0, [pc, #452]	; (8000890 <display_TrafficLight+0x2b4>)
 80006cc:	f001 f975 	bl	80019ba <HAL_GPIO_WritePin>
			display_1st_2SEG(red-time_D); // hien thi thoi gian tuong ung
 80006d0:	4b71      	ldr	r3, [pc, #452]	; (8000898 <display_TrafficLight+0x2bc>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	68fa      	ldr	r2, [r7, #12]
 80006d6:	1ad3      	subs	r3, r2, r3
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff fe6b 	bl	80003b4 <display_1st_2SEG>
			if(flag_timer0()==1){
 80006de:	f000 fce9 	bl	80010b4 <flag_timer0>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d16a      	bne.n	80007be <display_TrafficLight+0x1e2>
				if (++time_D==red){
 80006e8:	4b6b      	ldr	r3, [pc, #428]	; (8000898 <display_TrafficLight+0x2bc>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4a6a      	ldr	r2, [pc, #424]	; (8000898 <display_TrafficLight+0x2bc>)
 80006f0:	6013      	str	r3, [r2, #0]
 80006f2:	4b69      	ldr	r3, [pc, #420]	; (8000898 <display_TrafficLight+0x2bc>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	68fa      	ldr	r2, [r7, #12]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d105      	bne.n	8000708 <display_TrafficLight+0x12c>
					state_D=GREEN;
 80006fc:	4b65      	ldr	r3, [pc, #404]	; (8000894 <display_TrafficLight+0x2b8>)
 80006fe:	2202      	movs	r2, #2
 8000700:	701a      	strb	r2, [r3, #0]
					time_D=0;
 8000702:	4b65      	ldr	r3, [pc, #404]	; (8000898 <display_TrafficLight+0x2bc>)
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
				}
				setTimer0(1000);
 8000708:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800070c:	f000 fc9c 	bl	8001048 <setTimer0>
			}
		break;
 8000710:	e055      	b.n	80007be <display_TrafficLight+0x1e2>
		case GREEN:  	// RED=Off ; YELLOW=Off ; GREEN=On
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2108      	movs	r1, #8
 8000716:	485e      	ldr	r0, [pc, #376]	; (8000890 <display_TrafficLight+0x2b4>)
 8000718:	f001 f94f 	bl	80019ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4|GPIO_PIN_5, 1);
 800071c:	2201      	movs	r2, #1
 800071e:	2130      	movs	r1, #48	; 0x30
 8000720:	485b      	ldr	r0, [pc, #364]	; (8000890 <display_TrafficLight+0x2b4>)
 8000722:	f001 f94a 	bl	80019ba <HAL_GPIO_WritePin>
			display_1st_2SEG(green-time_D); // hien thi thoi gian tuong ung
 8000726:	4b5c      	ldr	r3, [pc, #368]	; (8000898 <display_TrafficLight+0x2bc>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff fe40 	bl	80003b4 <display_1st_2SEG>
			if(flag_timer0()==1){
 8000734:	f000 fcbe 	bl	80010b4 <flag_timer0>
 8000738:	4603      	mov	r3, r0
 800073a:	2b01      	cmp	r3, #1
 800073c:	d141      	bne.n	80007c2 <display_TrafficLight+0x1e6>
				if (++time_D==green){
 800073e:	4b56      	ldr	r3, [pc, #344]	; (8000898 <display_TrafficLight+0x2bc>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	3301      	adds	r3, #1
 8000744:	4a54      	ldr	r2, [pc, #336]	; (8000898 <display_TrafficLight+0x2bc>)
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b53      	ldr	r3, [pc, #332]	; (8000898 <display_TrafficLight+0x2bc>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	68ba      	ldr	r2, [r7, #8]
 800074e:	429a      	cmp	r2, r3
 8000750:	d105      	bne.n	800075e <display_TrafficLight+0x182>
					state_D=YELLOW;
 8000752:	4b50      	ldr	r3, [pc, #320]	; (8000894 <display_TrafficLight+0x2b8>)
 8000754:	2201      	movs	r2, #1
 8000756:	701a      	strb	r2, [r3, #0]
					time_D=0;
 8000758:	4b4f      	ldr	r3, [pc, #316]	; (8000898 <display_TrafficLight+0x2bc>)
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
				}
				setTimer0(1000);
 800075e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000762:	f000 fc71 	bl	8001048 <setTimer0>
			}
		break;
 8000766:	e02c      	b.n	80007c2 <display_TrafficLight+0x1e6>
		case YELLOW:  	// RED=On ; YELLOW=Off ; GREEN=Off
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4, 0);
 8000768:	2200      	movs	r2, #0
 800076a:	2110      	movs	r1, #16
 800076c:	4848      	ldr	r0, [pc, #288]	; (8000890 <display_TrafficLight+0x2b4>)
 800076e:	f001 f924 	bl	80019ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3|GPIO_PIN_5, 1);
 8000772:	2201      	movs	r2, #1
 8000774:	2128      	movs	r1, #40	; 0x28
 8000776:	4846      	ldr	r0, [pc, #280]	; (8000890 <display_TrafficLight+0x2b4>)
 8000778:	f001 f91f 	bl	80019ba <HAL_GPIO_WritePin>
			display_1st_2SEG(yellow-time_D); // hien thi thoi gian tuong ung
 800077c:	4b46      	ldr	r3, [pc, #280]	; (8000898 <display_TrafficLight+0x2bc>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	1ad3      	subs	r3, r2, r3
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fe15 	bl	80003b4 <display_1st_2SEG>
			if(flag_timer0()==1){
 800078a:	f000 fc93 	bl	80010b4 <flag_timer0>
 800078e:	4603      	mov	r3, r0
 8000790:	2b01      	cmp	r3, #1
 8000792:	d118      	bne.n	80007c6 <display_TrafficLight+0x1ea>
				if (++time_D==yellow){
 8000794:	4b40      	ldr	r3, [pc, #256]	; (8000898 <display_TrafficLight+0x2bc>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	3301      	adds	r3, #1
 800079a:	4a3f      	ldr	r2, [pc, #252]	; (8000898 <display_TrafficLight+0x2bc>)
 800079c:	6013      	str	r3, [r2, #0]
 800079e:	4b3e      	ldr	r3, [pc, #248]	; (8000898 <display_TrafficLight+0x2bc>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d105      	bne.n	80007b4 <display_TrafficLight+0x1d8>
					state_D=RED;
 80007a8:	4b3a      	ldr	r3, [pc, #232]	; (8000894 <display_TrafficLight+0x2b8>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
					time_D=0;
 80007ae:	4b3a      	ldr	r3, [pc, #232]	; (8000898 <display_TrafficLight+0x2bc>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
				}
				setTimer0(1000);
 80007b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b8:	f000 fc46 	bl	8001048 <setTimer0>
			}
		break;
 80007bc:	e003      	b.n	80007c6 <display_TrafficLight+0x1ea>
		break;
 80007be:	bf00      	nop
 80007c0:	e002      	b.n	80007c8 <display_TrafficLight+0x1ec>
		break;
 80007c2:	bf00      	nop
 80007c4:	e000      	b.n	80007c8 <display_TrafficLight+0x1ec>
		break;
 80007c6:	bf00      	nop
		}
		//	Hiển thị đèn theo chieu ngang/////////////////////////////////////////////////////////
		switch(state_N){
 80007c8:	4b34      	ldr	r3, [pc, #208]	; (800089c <display_TrafficLight+0x2c0>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	d033      	beq.n	8000838 <display_TrafficLight+0x25c>
 80007d0:	2b02      	cmp	r3, #2
 80007d2:	f300 80c8 	bgt.w	8000966 <display_TrafficLight+0x38a>
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d002      	beq.n	80007e0 <display_TrafficLight+0x204>
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d062      	beq.n	80008a4 <display_TrafficLight+0x2c8>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
			_7SEG_D(8);
			_7SEG_N(8);

	}
}
 80007de:	e0c2      	b.n	8000966 <display_TrafficLight+0x38a>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2104      	movs	r1, #4
 80007e4:	482a      	ldr	r0, [pc, #168]	; (8000890 <display_TrafficLight+0x2b4>)
 80007e6:	f001 f8e8 	bl	80019ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0|GPIO_PIN_1, 1);
 80007ea:	2201      	movs	r2, #1
 80007ec:	2103      	movs	r1, #3
 80007ee:	4828      	ldr	r0, [pc, #160]	; (8000890 <display_TrafficLight+0x2b4>)
 80007f0:	f001 f8e3 	bl	80019ba <HAL_GPIO_WritePin>
			display_2nd_2SEG(red-time_N); // hien thi thoi gian tuong ung
 80007f4:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <display_TrafficLight+0x2c4>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	1ad3      	subs	r3, r2, r3
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fe67 	bl	80004d0 <display_2nd_2SEG>
			if(flag_timer1()==1){
 8000802:	f000 fc9d 	bl	8001140 <flag_timer1>
 8000806:	4603      	mov	r3, r0
 8000808:	2b01      	cmp	r3, #1
 800080a:	f040 80a7 	bne.w	800095c <display_TrafficLight+0x380>
				if (++time_N==red){
 800080e:	4b24      	ldr	r3, [pc, #144]	; (80008a0 <display_TrafficLight+0x2c4>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	3301      	adds	r3, #1
 8000814:	4a22      	ldr	r2, [pc, #136]	; (80008a0 <display_TrafficLight+0x2c4>)
 8000816:	6013      	str	r3, [r2, #0]
 8000818:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <display_TrafficLight+0x2c4>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	68fa      	ldr	r2, [r7, #12]
 800081e:	429a      	cmp	r2, r3
 8000820:	d105      	bne.n	800082e <display_TrafficLight+0x252>
					state_N=GREEN;
 8000822:	4b1e      	ldr	r3, [pc, #120]	; (800089c <display_TrafficLight+0x2c0>)
 8000824:	2202      	movs	r2, #2
 8000826:	701a      	strb	r2, [r3, #0]
					time_N=0;
 8000828:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <display_TrafficLight+0x2c4>)
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 800082e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000832:	f000 fc4f 	bl	80010d4 <setTimer1>
		break;
 8000836:	e091      	b.n	800095c <display_TrafficLight+0x380>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0, 0);
 8000838:	2200      	movs	r2, #0
 800083a:	2101      	movs	r1, #1
 800083c:	4814      	ldr	r0, [pc, #80]	; (8000890 <display_TrafficLight+0x2b4>)
 800083e:	f001 f8bc 	bl	80019ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1|GPIO_PIN_2, 1);
 8000842:	2201      	movs	r2, #1
 8000844:	2106      	movs	r1, #6
 8000846:	4812      	ldr	r0, [pc, #72]	; (8000890 <display_TrafficLight+0x2b4>)
 8000848:	f001 f8b7 	bl	80019ba <HAL_GPIO_WritePin>
			display_2nd_2SEG(green-time_N); // hien thi thoi gian tuong ung
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <display_TrafficLight+0x2c4>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	68ba      	ldr	r2, [r7, #8]
 8000852:	1ad3      	subs	r3, r2, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff fe3b 	bl	80004d0 <display_2nd_2SEG>
			if(flag_timer1()==1){
 800085a:	f000 fc71 	bl	8001140 <flag_timer1>
 800085e:	4603      	mov	r3, r0
 8000860:	2b01      	cmp	r3, #1
 8000862:	d17d      	bne.n	8000960 <display_TrafficLight+0x384>
				if (++time_N==green){
 8000864:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <display_TrafficLight+0x2c4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	3301      	adds	r3, #1
 800086a:	4a0d      	ldr	r2, [pc, #52]	; (80008a0 <display_TrafficLight+0x2c4>)
 800086c:	6013      	str	r3, [r2, #0]
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <display_TrafficLight+0x2c4>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	429a      	cmp	r2, r3
 8000876:	d105      	bne.n	8000884 <display_TrafficLight+0x2a8>
					state_N=YELLOW;
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <display_TrafficLight+0x2c0>)
 800087a:	2201      	movs	r2, #1
 800087c:	701a      	strb	r2, [r3, #0]
					time_N=0;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <display_TrafficLight+0x2c4>)
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000884:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000888:	f000 fc24 	bl	80010d4 <setTimer1>
		break;
 800088c:	e068      	b.n	8000960 <display_TrafficLight+0x384>
 800088e:	bf00      	nop
 8000890:	40010800 	.word	0x40010800
 8000894:	20000048 	.word	0x20000048
 8000898:	2000004c 	.word	0x2000004c
 800089c:	20000000 	.word	0x20000000
 80008a0:	20000050 	.word	0x20000050
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1, 0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2102      	movs	r1, #2
 80008a8:	4831      	ldr	r0, [pc, #196]	; (8000970 <display_TrafficLight+0x394>)
 80008aa:	f001 f886 	bl	80019ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0|GPIO_PIN_2, 1);
 80008ae:	2201      	movs	r2, #1
 80008b0:	2105      	movs	r1, #5
 80008b2:	482f      	ldr	r0, [pc, #188]	; (8000970 <display_TrafficLight+0x394>)
 80008b4:	f001 f881 	bl	80019ba <HAL_GPIO_WritePin>
			display_2nd_2SEG(yellow-time_N); // hien thi thoi gian tuong ung
 80008b8:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <display_TrafficLight+0x398>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	1ad3      	subs	r3, r2, r3
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fe05 	bl	80004d0 <display_2nd_2SEG>
			if(flag_timer1()==1){
 80008c6:	f000 fc3b 	bl	8001140 <flag_timer1>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d149      	bne.n	8000964 <display_TrafficLight+0x388>
				if (++time_N==yellow){
 80008d0:	4b28      	ldr	r3, [pc, #160]	; (8000974 <display_TrafficLight+0x398>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	3301      	adds	r3, #1
 80008d6:	4a27      	ldr	r2, [pc, #156]	; (8000974 <display_TrafficLight+0x398>)
 80008d8:	6013      	str	r3, [r2, #0]
 80008da:	4b26      	ldr	r3, [pc, #152]	; (8000974 <display_TrafficLight+0x398>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d105      	bne.n	80008f0 <display_TrafficLight+0x314>
					state_N=RED;
 80008e4:	4b24      	ldr	r3, [pc, #144]	; (8000978 <display_TrafficLight+0x39c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
					time_N=0;
 80008ea:	4b22      	ldr	r3, [pc, #136]	; (8000974 <display_TrafficLight+0x398>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 80008f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008f4:	f000 fbee 	bl	80010d4 <setTimer1>
		break;
 80008f8:	e034      	b.n	8000964 <display_TrafficLight+0x388>
	else if (red!=-1&&green!=-1&&yellow!=-1){
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000900:	d031      	beq.n	8000966 <display_TrafficLight+0x38a>
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000908:	d02d      	beq.n	8000966 <display_TrafficLight+0x38a>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000910:	d029      	beq.n	8000966 <display_TrafficLight+0x38a>
		int flag =flag_timer_7SEG();
 8000912:	f000 fcf5 	bl	8001300 <flag_timer_7SEG>
 8000916:	6138      	str	r0, [r7, #16]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_0,1);
 8000918:	2201      	movs	r2, #1
 800091a:	213f      	movs	r1, #63	; 0x3f
 800091c:	4814      	ldr	r0, [pc, #80]	; (8000970 <display_TrafficLight+0x394>)
 800091e:	f001 f84c 	bl	80019ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000928:	4811      	ldr	r0, [pc, #68]	; (8000970 <display_TrafficLight+0x394>)
 800092a:	f001 f846 	bl	80019ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000934:	480e      	ldr	r0, [pc, #56]	; (8000970 <display_TrafficLight+0x394>)
 8000936:	f001 f840 	bl	80019ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2140      	movs	r1, #64	; 0x40
 800093e:	480c      	ldr	r0, [pc, #48]	; (8000970 <display_TrafficLight+0x394>)
 8000940:	f001 f83b 	bl	80019ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	2180      	movs	r1, #128	; 0x80
 8000948:	4809      	ldr	r0, [pc, #36]	; (8000970 <display_TrafficLight+0x394>)
 800094a:	f001 f836 	bl	80019ba <HAL_GPIO_WritePin>
			_7SEG_D(8);
 800094e:	2008      	movs	r0, #8
 8000950:	f7ff fc8c 	bl	800026c <_7SEG_D>
			_7SEG_N(8);
 8000954:	2008      	movs	r0, #8
 8000956:	f7ff fbf9 	bl	800014c <_7SEG_N>
}
 800095a:	e004      	b.n	8000966 <display_TrafficLight+0x38a>
		break;
 800095c:	bf00      	nop
 800095e:	e002      	b.n	8000966 <display_TrafficLight+0x38a>
		break;
 8000960:	bf00      	nop
 8000962:	e000      	b.n	8000966 <display_TrafficLight+0x38a>
		break;
 8000964:	bf00      	nop
}
 8000966:	bf00      	nop
 8000968:	3720      	adds	r7, #32
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40010800 	.word	0x40010800
 8000974:	20000050 	.word	0x20000050
 8000978:	20000000 	.word	0x20000000

0800097c <button_reading>:
static uint16_t NamePort[3]={GPIO_PIN_13,GPIO_PIN_14,GPIO_PIN_15};
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N_OF_BUTTONS];

void button_reading(void){
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
	for(char i = 0; i < N_OF_BUTTONS; i ++){
 8000982:	2300      	movs	r3, #0
 8000984:	71fb      	strb	r3, [r7, #7]
 8000986:	e046      	b.n	8000a16 <button_reading+0x9a>

		debounceButtonBuffer2[i] =debounceButtonBuffer1[i];
 8000988:	79fa      	ldrb	r2, [r7, #7]
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	4926      	ldr	r1, [pc, #152]	; (8000a28 <button_reading+0xac>)
 800098e:	5c89      	ldrb	r1, [r1, r2]
 8000990:	4a26      	ldr	r2, [pc, #152]	; (8000a2c <button_reading+0xb0>)
 8000992:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(GPIOA, NamePort[i]);
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	4a26      	ldr	r2, [pc, #152]	; (8000a30 <button_reading+0xb4>)
 8000998:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800099c:	79fc      	ldrb	r4, [r7, #7]
 800099e:	4619      	mov	r1, r3
 80009a0:	4824      	ldr	r0, [pc, #144]	; (8000a34 <button_reading+0xb8>)
 80009a2:	f000 fff3 	bl	800198c <HAL_GPIO_ReadPin>
 80009a6:	4603      	mov	r3, r0
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <button_reading+0xac>)
 80009ac:	551a      	strb	r2, [r3, r4]

		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	4a1d      	ldr	r2, [pc, #116]	; (8000a28 <button_reading+0xac>)
 80009b2:	5cd2      	ldrb	r2, [r2, r3]
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	491d      	ldr	r1, [pc, #116]	; (8000a2c <button_reading+0xb0>)
 80009b8:	5ccb      	ldrb	r3, [r1, r3]
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d105      	bne.n	80009ca <button_reading+0x4e>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 80009be:	79fa      	ldrb	r2, [r7, #7]
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	4919      	ldr	r1, [pc, #100]	; (8000a28 <button_reading+0xac>)
 80009c4:	5c89      	ldrb	r1, [r1, r2]
 80009c6:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <button_reading+0xbc>)
 80009c8:	54d1      	strb	r1, [r2, r3]
			if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	4a1a      	ldr	r2, [pc, #104]	; (8000a38 <button_reading+0xbc>)
 80009ce:	5cd3      	ldrb	r3, [r2, r3]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d114      	bne.n	80009fe <button_reading+0x82>
			//if a button is pressed, we start counting
				if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING){
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	4a19      	ldr	r2, [pc, #100]	; (8000a3c <button_reading+0xc0>)
 80009d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009dc:	2b63      	cmp	r3, #99	; 0x63
 80009de:	d809      	bhi.n	80009f4 <button_reading+0x78>
					counterForButtonPress1s[i]++;
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	4a16      	ldr	r2, [pc, #88]	; (8000a3c <button_reading+0xc0>)
 80009e4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80009e8:	3201      	adds	r2, #1
 80009ea:	b291      	uxth	r1, r2
 80009ec:	4a13      	ldr	r2, [pc, #76]	; (8000a3c <button_reading+0xc0>)
 80009ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80009f2:	e00d      	b.n	8000a10 <button_reading+0x94>
				} else {
				//the flag is turned on when 1 second has passed
				//since the button is pressed.
					flagForButtonPress1s[i] = 1;
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <button_reading+0xc4>)
 80009f8:	2101      	movs	r1, #1
 80009fa:	54d1      	strb	r1, [r2, r3]
 80009fc:	e008      	b.n	8000a10 <button_reading+0x94>
					//todo
				}
			} else {
				counterForButtonPress1s[i] = 0;
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <button_reading+0xc0>)
 8000a02:	2100      	movs	r1, #0
 8000a04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	4a0d      	ldr	r2, [pc, #52]	; (8000a40 <button_reading+0xc4>)
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	54d1      	strb	r1, [r2, r3]
	for(char i = 0; i < N_OF_BUTTONS; i ++){
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	3301      	adds	r3, #1
 8000a14:	71fb      	strb	r3, [r7, #7]
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d9b5      	bls.n	8000988 <button_reading+0xc>
			}
	}
}
 8000a1c:	bf00      	nop
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd90      	pop	{r4, r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000058 	.word	0x20000058
 8000a2c:	2000005c 	.word	0x2000005c
 8000a30:	20000004 	.word	0x20000004
 8000a34:	40010800 	.word	0x40010800
 8000a38:	20000054 	.word	0x20000054
 8000a3c:	20000064 	.word	0x20000064
 8000a40:	20000060 	.word	0x20000060

08000a44 <is_button_pressed>:
uint8_t is_button_pressed(uint8_t index){
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
	if(index >= N_OF_BUTTONS) return 0;
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d901      	bls.n	8000a58 <is_button_pressed+0x14>
 8000a54:	2300      	movs	r3, #0
 8000a56:	e007      	b.n	8000a68 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	4a06      	ldr	r2, [pc, #24]	; (8000a74 <is_button_pressed+0x30>)
 8000a5c:	5cd3      	ldrb	r3, [r2, r3]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	bf0c      	ite	eq
 8000a62:	2301      	moveq	r3, #1
 8000a64:	2300      	movne	r3, #0
 8000a66:	b2db      	uxtb	r3, r3
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20000054 	.word	0x20000054

08000a78 <is_button_pressed_1s>:
uint8_t is_button_pressed_1s(uint8_t index){
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
	if(index >= N_OF_BUTTONS) return 0xff;
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d901      	bls.n	8000a8c <is_button_pressed_1s+0x14>
 8000a88:	23ff      	movs	r3, #255	; 0xff
 8000a8a:	e007      	b.n	8000a9c <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	4a06      	ldr	r2, [pc, #24]	; (8000aa8 <is_button_pressed_1s+0x30>)
 8000a90:	5cd3      	ldrb	r3, [r2, r3]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	bf0c      	ite	eq
 8000a96:	2301      	moveq	r3, #1
 8000a98:	2300      	movne	r3, #0
 8000a9a:	b2db      	uxtb	r3, r3
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	20000060 	.word	0x20000060

08000aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab2:	f000 fc81 	bl	80013b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab6:	f000 f821 	bl	8000afc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aba:	f000 f8a7 	bl	8000c0c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000abe:	f000 f859 	bl	8000b74 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 8000ac2:	480d      	ldr	r0, [pc, #52]	; (8000af8 <main+0x4c>)
 8000ac4:	f001 fbe2 	bl	800228c <HAL_TIM_Base_Start_IT>
  setTimer0(1000);
 8000ac8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000acc:	f000 fabc 	bl	8001048 <setTimer0>
  setTimer1(1000);
 8000ad0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ad4:	f000 fafe 	bl	80010d4 <setTimer1>
  setTimer2(200);
 8000ad8:	20c8      	movs	r0, #200	; 0xc8
 8000ada:	f000 fb41 	bl	8001160 <setTimer2>
  setTimer3(500);
 8000ade:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ae2:	f000 fb83 	bl	80011ec <setTimer3>
  setTimer_7SEG(500);
 8000ae6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aea:	f000 fbc5 	bl	8001278 <setTimer_7SEG>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int num=1;
 8000aee:	2301      	movs	r3, #1
 8000af0:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */
	  //display_TrafficLight(-1,0,0);
	  fsm_for_processing();
 8000af2:	f000 f8f5 	bl	8000ce0 <fsm_for_processing>
 8000af6:	e7fc      	b.n	8000af2 <main+0x46>
 8000af8:	20000094 	.word	0x20000094

08000afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b090      	sub	sp, #64	; 0x40
 8000b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b02:	f107 0318 	add.w	r3, r7, #24
 8000b06:	2228      	movs	r2, #40	; 0x28
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f001 ff76 	bl	80029fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b22:	2301      	movs	r3, #1
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b26:	2310      	movs	r3, #16
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b2e:	f107 0318 	add.w	r3, r7, #24
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 ff72 	bl	8001a1c <HAL_RCC_OscConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b3e:	f000 f8c9 	bl	8000cd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b42:	230f      	movs	r3, #15
 8000b44:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f001 f9de 	bl	8001f1c <HAL_RCC_ClockConfig>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b66:	f000 f8b5 	bl	8000cd4 <Error_Handler>
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	3740      	adds	r7, #64	; 0x40
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b88:	463b      	mov	r3, r7
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b90:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <MX_TIM2_Init+0x94>)
 8000b92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <MX_TIM2_Init+0x94>)
 8000b9a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba0:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <MX_TIM2_Init+0x94>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <MX_TIM2_Init+0x94>)
 8000ba8:	2209      	movs	r2, #9
 8000baa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bac:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <MX_TIM2_Init+0x94>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <MX_TIM2_Init+0x94>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bb8:	4813      	ldr	r0, [pc, #76]	; (8000c08 <MX_TIM2_Init+0x94>)
 8000bba:	f001 fb17 	bl	80021ec <HAL_TIM_Base_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bc4:	f000 f886 	bl	8000cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480c      	ldr	r0, [pc, #48]	; (8000c08 <MX_TIM2_Init+0x94>)
 8000bd6:	f001 fcad 	bl	8002534 <HAL_TIM_ConfigClockSource>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000be0:	f000 f878 	bl	8000cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be4:	2300      	movs	r3, #0
 8000be6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bec:	463b      	mov	r3, r7
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_TIM2_Init+0x94>)
 8000bf2:	f001 fe75 	bl	80028e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000bfc:	f000 f86a 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000094 	.word	0x20000094

08000c0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c12:	f107 0308 	add.w	r3, r7, #8
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c20:	4b29      	ldr	r3, [pc, #164]	; (8000cc8 <MX_GPIO_Init+0xbc>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	4a28      	ldr	r2, [pc, #160]	; (8000cc8 <MX_GPIO_Init+0xbc>)
 8000c26:	f043 0304 	orr.w	r3, r3, #4
 8000c2a:	6193      	str	r3, [r2, #24]
 8000c2c:	4b26      	ldr	r3, [pc, #152]	; (8000cc8 <MX_GPIO_Init+0xbc>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	f003 0304 	and.w	r3, r3, #4
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c38:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <MX_GPIO_Init+0xbc>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4a22      	ldr	r2, [pc, #136]	; (8000cc8 <MX_GPIO_Init+0xbc>)
 8000c3e:	f043 0308 	orr.w	r3, r3, #8
 8000c42:	6193      	str	r3, [r2, #24]
 8000c44:	4b20      	ldr	r3, [pc, #128]	; (8000cc8 <MX_GPIO_Init+0xbc>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	f003 0308 	and.w	r3, r3, #8
 8000c4c:	603b      	str	r3, [r7, #0]
 8000c4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c50:	2201      	movs	r2, #1
 8000c52:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8000c56:	481d      	ldr	r0, [pc, #116]	; (8000ccc <MX_GPIO_Init+0xc0>)
 8000c58:	f000 feaf 	bl	80019ba <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000c62:	481b      	ldr	r0, [pc, #108]	; (8000cd0 <MX_GPIO_Init+0xc4>)
 8000c64:	f000 fea9 	bl	80019ba <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c68:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000c6c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2302      	movs	r3, #2
 8000c78:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4812      	ldr	r0, [pc, #72]	; (8000ccc <MX_GPIO_Init+0xc0>)
 8000c82:	f000 fd09 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB3
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000c86:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000c8a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2302      	movs	r3, #2
 8000c96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c98:	f107 0308 	add.w	r3, r7, #8
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <MX_GPIO_Init+0xc4>)
 8000ca0:	f000 fcfa 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000ca4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000ca8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	f107 0308 	add.w	r3, r7, #8
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4804      	ldr	r0, [pc, #16]	; (8000ccc <MX_GPIO_Init+0xc0>)
 8000cba:	f000 fced 	bl	8001698 <HAL_GPIO_Init>

}
 8000cbe:	bf00      	nop
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	40010800 	.word	0x40010800
 8000cd0:	40010c00 	.word	0x40010c00

08000cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd8:	b672      	cpsid	i
}
 8000cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <Error_Handler+0x8>
	...

08000ce0 <fsm_for_processing>:
#define timeRespone 	100

enum fsmState{STATE_1,STATE_2,STATE_3,STATE_4} fsmState;


void fsm_for_processing(){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0

	static int red=5,green=3,yellow=2,mod=2,counter_to_set=1;
	static enum fsmState Main_State=STATE_2;
	switch(Main_State){
 8000ce4:	4b8b      	ldr	r3, [pc, #556]	; (8000f14 <fsm_for_processing+0x234>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b03      	cmp	r3, #3
 8000cea:	f200 8111 	bhi.w	8000f10 <fsm_for_processing+0x230>
 8000cee:	a201      	add	r2, pc, #4	; (adr r2, 8000cf4 <fsm_for_processing+0x14>)
 8000cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf4:	08000d05 	.word	0x08000d05
 8000cf8:	08000d59 	.word	0x08000d59
 8000cfc:	08000df3 	.word	0x08000df3
 8000d00:	08000e7d 	.word	0x08000e7d

	case STATE_1:
		display_TrafficLight(red, green, yellow); //hien thi den bth
 8000d04:	4b84      	ldr	r3, [pc, #528]	; (8000f18 <fsm_for_processing+0x238>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a84      	ldr	r2, [pc, #528]	; (8000f1c <fsm_for_processing+0x23c>)
 8000d0a:	6811      	ldr	r1, [r2, #0]
 8000d0c:	4a84      	ldr	r2, [pc, #528]	; (8000f20 <fsm_for_processing+0x240>)
 8000d0e:	6812      	ldr	r2, [r2, #0]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fc63 	bl	80005dc <display_TrafficLight>

		//display_1st_2SEG();  đã gọi trong hàm display_TrafficLight(red, green, yellow)
		//display_2nd_2SEG();

		if (flag_timer2()){
 8000d16:	f000 fa59 	bl	80011cc <flag_timer2>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	f000 80f0 	beq.w	8000f02 <fsm_for_processing+0x222>
			if (is_button_pressed(0)||is_button_pressed_1s(0)){
 8000d22:	2000      	movs	r0, #0
 8000d24:	f7ff fe8e 	bl	8000a44 <is_button_pressed>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d105      	bne.n	8000d3a <fsm_for_processing+0x5a>
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f7ff fea2 	bl	8000a78 <is_button_pressed_1s>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d00a      	beq.n	8000d50 <fsm_for_processing+0x70>
				counter_to_set=1;
 8000d3a:	4b7a      	ldr	r3, [pc, #488]	; (8000f24 <fsm_for_processing+0x244>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]
				mod++;
 8000d40:	4b79      	ldr	r3, [pc, #484]	; (8000f28 <fsm_for_processing+0x248>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	3301      	adds	r3, #1
 8000d46:	4a78      	ldr	r2, [pc, #480]	; (8000f28 <fsm_for_processing+0x248>)
 8000d48:	6013      	str	r3, [r2, #0]
				Main_State=STATE_2;
 8000d4a:	4b72      	ldr	r3, [pc, #456]	; (8000f14 <fsm_for_processing+0x234>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	701a      	strb	r2, [r3, #0]
			}
			setTimer2(timeRespone);
 8000d50:	2064      	movs	r0, #100	; 0x64
 8000d52:	f000 fa05 	bl	8001160 <setTimer2>
		}
	break;
 8000d56:	e0d4      	b.n	8000f02 <fsm_for_processing+0x222>

	case STATE_2:
		display_1st_2SEG(mod); //State for red
 8000d58:	4b73      	ldr	r3, [pc, #460]	; (8000f28 <fsm_for_processing+0x248>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fb29 	bl	80003b4 <display_1st_2SEG>
		display_TrafficLight(-1, 0, 0);// chop nhay led
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6a:	f7ff fc37 	bl	80005dc <display_TrafficLight>
		display_2nd_2SEG(counter_to_set); // hien thi thoi gian muon set cho den tuong ung
 8000d6e:	4b6d      	ldr	r3, [pc, #436]	; (8000f24 <fsm_for_processing+0x244>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fbac 	bl	80004d0 <display_2nd_2SEG>
		if (flag_timer2()){
 8000d78:	f000 fa28 	bl	80011cc <flag_timer2>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f000 80c1 	beq.w	8000f06 <fsm_for_processing+0x226>
			if (is_button_pressed(0)||is_button_pressed_1s(0)){
 8000d84:	2000      	movs	r0, #0
 8000d86:	f7ff fe5d 	bl	8000a44 <is_button_pressed>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d105      	bne.n	8000d9c <fsm_for_processing+0xbc>
 8000d90:	2000      	movs	r0, #0
 8000d92:	f7ff fe71 	bl	8000a78 <is_button_pressed_1s>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00a      	beq.n	8000db2 <fsm_for_processing+0xd2>
				counter_to_set=1;
 8000d9c:	4b61      	ldr	r3, [pc, #388]	; (8000f24 <fsm_for_processing+0x244>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	601a      	str	r2, [r3, #0]
				mod++;
 8000da2:	4b61      	ldr	r3, [pc, #388]	; (8000f28 <fsm_for_processing+0x248>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	3301      	adds	r3, #1
 8000da8:	4a5f      	ldr	r2, [pc, #380]	; (8000f28 <fsm_for_processing+0x248>)
 8000daa:	6013      	str	r3, [r2, #0]
				Main_State=STATE_3;
 8000dac:	4b59      	ldr	r3, [pc, #356]	; (8000f14 <fsm_for_processing+0x234>)
 8000dae:	2202      	movs	r2, #2
 8000db0:	701a      	strb	r2, [r3, #0]
			}
			if (is_button_pressed(1) ){
 8000db2:	2001      	movs	r0, #1
 8000db4:	f7ff fe46 	bl	8000a44 <is_button_pressed>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d00b      	beq.n	8000dd6 <fsm_for_processing+0xf6>
				counter_to_set++;
 8000dbe:	4b59      	ldr	r3, [pc, #356]	; (8000f24 <fsm_for_processing+0x244>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	4a57      	ldr	r2, [pc, #348]	; (8000f24 <fsm_for_processing+0x244>)
 8000dc6:	6013      	str	r3, [r2, #0]
				if (counter_to_set>99) counter_to_set=0;
 8000dc8:	4b56      	ldr	r3, [pc, #344]	; (8000f24 <fsm_for_processing+0x244>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b63      	cmp	r3, #99	; 0x63
 8000dce:	dd02      	ble.n	8000dd6 <fsm_for_processing+0xf6>
 8000dd0:	4b54      	ldr	r3, [pc, #336]	; (8000f24 <fsm_for_processing+0x244>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
			}
			if (is_button_pressed(2)){
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	f7ff fe34 	bl	8000a44 <is_button_pressed>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d003      	beq.n	8000dea <fsm_for_processing+0x10a>
				red=counter_to_set;
 8000de2:	4b50      	ldr	r3, [pc, #320]	; (8000f24 <fsm_for_processing+0x244>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a4c      	ldr	r2, [pc, #304]	; (8000f18 <fsm_for_processing+0x238>)
 8000de8:	6013      	str	r3, [r2, #0]
			}
			setTimer2(timeRespone);
 8000dea:	2064      	movs	r0, #100	; 0x64
 8000dec:	f000 f9b8 	bl	8001160 <setTimer2>

		}
	break;
 8000df0:	e089      	b.n	8000f06 <fsm_for_processing+0x226>

	case STATE_3: // State for yellow
		display_1st_2SEG(mod);
 8000df2:	4b4d      	ldr	r3, [pc, #308]	; (8000f28 <fsm_for_processing+0x248>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fadc 	bl	80003b4 <display_1st_2SEG>
		display_TrafficLight(0, 0, -1);// chop nhay led
 8000dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000e00:	2100      	movs	r1, #0
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff fbea 	bl	80005dc <display_TrafficLight>
		display_2nd_2SEG(counter_to_set); // hien thi thoi gian muon set cho den tuong ung
 8000e08:	4b46      	ldr	r3, [pc, #280]	; (8000f24 <fsm_for_processing+0x244>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fb5f 	bl	80004d0 <display_2nd_2SEG>
		if (flag_timer2()){
 8000e12:	f000 f9db 	bl	80011cc <flag_timer2>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d076      	beq.n	8000f0a <fsm_for_processing+0x22a>
			if (is_button_pressed(0)||is_button_pressed_1s(0)){
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f7ff fe11 	bl	8000a44 <is_button_pressed>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d105      	bne.n	8000e34 <fsm_for_processing+0x154>
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f7ff fe25 	bl	8000a78 <is_button_pressed_1s>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d00a      	beq.n	8000e4a <fsm_for_processing+0x16a>
				counter_to_set=1;
 8000e34:	4b3b      	ldr	r3, [pc, #236]	; (8000f24 <fsm_for_processing+0x244>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	601a      	str	r2, [r3, #0]
				mod++;
 8000e3a:	4b3b      	ldr	r3, [pc, #236]	; (8000f28 <fsm_for_processing+0x248>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	4a39      	ldr	r2, [pc, #228]	; (8000f28 <fsm_for_processing+0x248>)
 8000e42:	6013      	str	r3, [r2, #0]
				Main_State=STATE_4;
 8000e44:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <fsm_for_processing+0x234>)
 8000e46:	2203      	movs	r2, #3
 8000e48:	701a      	strb	r2, [r3, #0]
			}
			if (is_button_pressed(1)){
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f7ff fdfa 	bl	8000a44 <is_button_pressed>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d004      	beq.n	8000e60 <fsm_for_processing+0x180>
				counter_to_set++;
 8000e56:	4b33      	ldr	r3, [pc, #204]	; (8000f24 <fsm_for_processing+0x244>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	4a31      	ldr	r2, [pc, #196]	; (8000f24 <fsm_for_processing+0x244>)
 8000e5e:	6013      	str	r3, [r2, #0]
			}
			if (is_button_pressed(2)){
 8000e60:	2002      	movs	r0, #2
 8000e62:	f7ff fdef 	bl	8000a44 <is_button_pressed>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <fsm_for_processing+0x194>
				yellow=counter_to_set;
 8000e6c:	4b2d      	ldr	r3, [pc, #180]	; (8000f24 <fsm_for_processing+0x244>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a2b      	ldr	r2, [pc, #172]	; (8000f20 <fsm_for_processing+0x240>)
 8000e72:	6013      	str	r3, [r2, #0]
			}
			setTimer2(timeRespone);
 8000e74:	2064      	movs	r0, #100	; 0x64
 8000e76:	f000 f973 	bl	8001160 <setTimer2>

		}
	break;
 8000e7a:	e046      	b.n	8000f0a <fsm_for_processing+0x22a>
	case STATE_4:	//State for green
		display_1st_2SEG(mod);
 8000e7c:	4b2a      	ldr	r3, [pc, #168]	; (8000f28 <fsm_for_processing+0x248>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fa97 	bl	80003b4 <display_1st_2SEG>
		display_TrafficLight(0, -1, 0);// chop nhay led
 8000e86:	2200      	movs	r2, #0
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f7ff fba5 	bl	80005dc <display_TrafficLight>
		display_2nd_2SEG(counter_to_set); // hien thi thoi gian muon set cho den tuong ung
 8000e92:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <fsm_for_processing+0x244>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fb1a 	bl	80004d0 <display_2nd_2SEG>
		if (flag_timer2()){
 8000e9c:	f000 f996 	bl	80011cc <flag_timer2>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d033      	beq.n	8000f0e <fsm_for_processing+0x22e>
			if (is_button_pressed(0)||is_button_pressed_1s(0)){
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f7ff fdcc 	bl	8000a44 <is_button_pressed>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d105      	bne.n	8000ebe <fsm_for_processing+0x1de>
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f7ff fde0 	bl	8000a78 <is_button_pressed_1s>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d008      	beq.n	8000ed0 <fsm_for_processing+0x1f0>
				counter_to_set=1;
 8000ebe:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <fsm_for_processing+0x244>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]
				mod=1;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <fsm_for_processing+0x248>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	601a      	str	r2, [r3, #0]
				Main_State=STATE_1;
 8000eca:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <fsm_for_processing+0x234>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
			}
			if (is_button_pressed(1)){
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f7ff fdb7 	bl	8000a44 <is_button_pressed>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d004      	beq.n	8000ee6 <fsm_for_processing+0x206>
				counter_to_set++;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <fsm_for_processing+0x244>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	4a10      	ldr	r2, [pc, #64]	; (8000f24 <fsm_for_processing+0x244>)
 8000ee4:	6013      	str	r3, [r2, #0]
			}
			if (is_button_pressed(2)){
 8000ee6:	2002      	movs	r0, #2
 8000ee8:	f7ff fdac 	bl	8000a44 <is_button_pressed>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <fsm_for_processing+0x21a>
				green=counter_to_set;
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <fsm_for_processing+0x244>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a09      	ldr	r2, [pc, #36]	; (8000f1c <fsm_for_processing+0x23c>)
 8000ef8:	6013      	str	r3, [r2, #0]
			}
			setTimer2(timeRespone);
 8000efa:	2064      	movs	r0, #100	; 0x64
 8000efc:	f000 f930 	bl	8001160 <setTimer2>

		}
	break;
 8000f00:	e005      	b.n	8000f0e <fsm_for_processing+0x22e>
	break;
 8000f02:	bf00      	nop
 8000f04:	e004      	b.n	8000f10 <fsm_for_processing+0x230>
	break;
 8000f06:	bf00      	nop
 8000f08:	e002      	b.n	8000f10 <fsm_for_processing+0x230>
	break;
 8000f0a:	bf00      	nop
 8000f0c:	e000      	b.n	8000f10 <fsm_for_processing+0x230>
	break;
 8000f0e:	bf00      	nop

	}
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	2000000a 	.word	0x2000000a
 8000f18:	2000000c 	.word	0x2000000c
 8000f1c:	20000010 	.word	0x20000010
 8000f20:	20000014 	.word	0x20000014
 8000f24:	20000018 	.word	0x20000018
 8000f28:	2000001c 	.word	0x2000001c

08000f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <HAL_MspInit+0x5c>)
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <HAL_MspInit+0x5c>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6193      	str	r3, [r2, #24]
 8000f3e:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_MspInit+0x5c>)
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <HAL_MspInit+0x5c>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <HAL_MspInit+0x5c>)
 8000f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f54:	61d3      	str	r3, [r2, #28]
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <HAL_MspInit+0x5c>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_MspInit+0x60>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <HAL_MspInit+0x60>)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40010000 	.word	0x40010000

08000f90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fa0:	d113      	bne.n	8000fca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <HAL_TIM_Base_MspInit+0x44>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <HAL_TIM_Base_MspInit+0x44>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	61d3      	str	r3, [r2, #28]
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <HAL_TIM_Base_MspInit+0x44>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	201c      	movs	r0, #28
 8000fc0:	f000 fb33 	bl	800162a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fc4:	201c      	movs	r0, #28
 8000fc6:	f000 fb4c 	bl	8001662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <NMI_Handler+0x4>

08000fde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <HardFault_Handler+0x4>

08000fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <MemManage_Handler+0x4>

08000fea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <BusFault_Handler+0x4>

08000ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <UsageFault_Handler+0x4>

08000ff6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr

08001002 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr

0800100e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr

0800101a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101e:	f000 fa11 	bl	8001444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <TIM2_IRQHandler+0x10>)
 800102e:	f001 f979 	bl	8002324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000094 	.word	0x20000094

0800103c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr

08001048 <setTimer0>:
#define SRC_TIMER_C_
#define TIMER_CYCLE 	10
///////////////////////////////////////////////////////////////////////////////////////////
static int timer_counter0;
static int timer_flag0 = 0;
void setTimer0( int duration ){
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	timer_counter0 = duration / TIMER_CYCLE ;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a08      	ldr	r2, [pc, #32]	; (8001074 <setTimer0+0x2c>)
 8001054:	fb82 1203 	smull	r1, r2, r2, r3
 8001058:	1092      	asrs	r2, r2, #2
 800105a:	17db      	asrs	r3, r3, #31
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	4a06      	ldr	r2, [pc, #24]	; (8001078 <setTimer0+0x30>)
 8001060:	6013      	str	r3, [r2, #0]
	timer_flag0 = 0;
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <setTimer0+0x34>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	66666667 	.word	0x66666667
 8001078:	2000006c 	.word	0x2000006c
 800107c:	20000070 	.word	0x20000070

08001080 <timer_run0>:
void timer_run0(){
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
	if( timer_counter0 > 0){
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <timer_run0+0x2c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	dd0b      	ble.n	80010a4 <timer_run0+0x24>
		timer_counter0 --;
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <timer_run0+0x2c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	3b01      	subs	r3, #1
 8001092:	4a06      	ldr	r2, [pc, #24]	; (80010ac <timer_run0+0x2c>)
 8001094:	6013      	str	r3, [r2, #0]
		if( timer_counter0 == 0)	timer_flag0 = 1;
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <timer_run0+0x2c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d102      	bne.n	80010a4 <timer_run0+0x24>
 800109e:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <timer_run0+0x30>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	601a      	str	r2, [r3, #0]
	}
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr
 80010ac:	2000006c 	.word	0x2000006c
 80010b0:	20000070 	.word	0x20000070

080010b4 <flag_timer0>:
int flag_timer0(){
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
	if (timer_flag0==1)
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <flag_timer0+0x1c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d101      	bne.n	80010c4 <flag_timer0+0x10>
		return 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e000      	b.n	80010c6 <flag_timer0+0x12>
	return 0;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000070 	.word	0x20000070

080010d4 <setTimer1>:
///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
static int timer_counter1;
static int timer_flag1 = 0;
void setTimer1( int duration ){
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	timer_counter1 = duration / TIMER_CYCLE ;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a08      	ldr	r2, [pc, #32]	; (8001100 <setTimer1+0x2c>)
 80010e0:	fb82 1203 	smull	r1, r2, r2, r3
 80010e4:	1092      	asrs	r2, r2, #2
 80010e6:	17db      	asrs	r3, r3, #31
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	4a06      	ldr	r2, [pc, #24]	; (8001104 <setTimer1+0x30>)
 80010ec:	6013      	str	r3, [r2, #0]
	timer_flag1 = 0;
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <setTimer1+0x34>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	66666667 	.word	0x66666667
 8001104:	20000074 	.word	0x20000074
 8001108:	20000078 	.word	0x20000078

0800110c <timer_run1>:
void timer_run1(){
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
	if( timer_counter1 > 0){
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <timer_run1+0x2c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	dd0b      	ble.n	8001130 <timer_run1+0x24>
		timer_counter1 --;
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <timer_run1+0x2c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	3b01      	subs	r3, #1
 800111e:	4a06      	ldr	r2, [pc, #24]	; (8001138 <timer_run1+0x2c>)
 8001120:	6013      	str	r3, [r2, #0]
		if( timer_counter1 == 0)	timer_flag1 = 1;
 8001122:	4b05      	ldr	r3, [pc, #20]	; (8001138 <timer_run1+0x2c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d102      	bne.n	8001130 <timer_run1+0x24>
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <timer_run1+0x30>)
 800112c:	2201      	movs	r2, #1
 800112e:	601a      	str	r2, [r3, #0]
	}
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	20000074 	.word	0x20000074
 800113c:	20000078 	.word	0x20000078

08001140 <flag_timer1>:
int flag_timer1(){
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
	if (timer_flag1==1)
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <flag_timer1+0x1c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d101      	bne.n	8001150 <flag_timer1+0x10>
		return 1;
 800114c:	2301      	movs	r3, #1
 800114e:	e000      	b.n	8001152 <flag_timer1+0x12>
	return 0;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20000078 	.word	0x20000078

08001160 <setTimer2>:
///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
static int timer_counter2;
static int timer_flag2 = 0;
void setTimer2( int duration ){
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	timer_counter2 = duration / TIMER_CYCLE ;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a08      	ldr	r2, [pc, #32]	; (800118c <setTimer2+0x2c>)
 800116c:	fb82 1203 	smull	r1, r2, r2, r3
 8001170:	1092      	asrs	r2, r2, #2
 8001172:	17db      	asrs	r3, r3, #31
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	4a06      	ldr	r2, [pc, #24]	; (8001190 <setTimer2+0x30>)
 8001178:	6013      	str	r3, [r2, #0]
	timer_flag2 = 0;
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <setTimer2+0x34>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	66666667 	.word	0x66666667
 8001190:	2000007c 	.word	0x2000007c
 8001194:	20000080 	.word	0x20000080

08001198 <timer_run2>:
void timer_run2(){
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
	if( timer_counter2 > 0){
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <timer_run2+0x2c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	dd0b      	ble.n	80011bc <timer_run2+0x24>
		timer_counter2 --;
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <timer_run2+0x2c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <timer_run2+0x2c>)
 80011ac:	6013      	str	r3, [r2, #0]
		if( timer_counter2 == 0)timer_flag2 = 1;
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <timer_run2+0x2c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d102      	bne.n	80011bc <timer_run2+0x24>
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <timer_run2+0x30>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	601a      	str	r2, [r3, #0]
	}
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	2000007c 	.word	0x2000007c
 80011c8:	20000080 	.word	0x20000080

080011cc <flag_timer2>:
int flag_timer2(){
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
	if (timer_flag2==1)
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <flag_timer2+0x1c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d101      	bne.n	80011dc <flag_timer2+0x10>
		return 1;
 80011d8:	2301      	movs	r3, #1
 80011da:	e000      	b.n	80011de <flag_timer2+0x12>
	return 0;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000080 	.word	0x20000080

080011ec <setTimer3>:
///////////////////////////////////////////////////////////////////////////////////////////
static int timer_counter3;
static int timer_flag3 = 0;
void setTimer3( int duration ){
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	timer_counter3 = duration / TIMER_CYCLE ;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a08      	ldr	r2, [pc, #32]	; (8001218 <setTimer3+0x2c>)
 80011f8:	fb82 1203 	smull	r1, r2, r2, r3
 80011fc:	1092      	asrs	r2, r2, #2
 80011fe:	17db      	asrs	r3, r3, #31
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	4a06      	ldr	r2, [pc, #24]	; (800121c <setTimer3+0x30>)
 8001204:	6013      	str	r3, [r2, #0]
	timer_flag3 = 0;
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <setTimer3+0x34>)
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	66666667 	.word	0x66666667
 800121c:	20000084 	.word	0x20000084
 8001220:	20000088 	.word	0x20000088

08001224 <timer_run3>:
void timer_run3(){
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
	if( timer_counter3 > 0){
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <timer_run3+0x2c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	dd0b      	ble.n	8001248 <timer_run3+0x24>
		timer_counter3 --;
 8001230:	4b07      	ldr	r3, [pc, #28]	; (8001250 <timer_run3+0x2c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	3b01      	subs	r3, #1
 8001236:	4a06      	ldr	r2, [pc, #24]	; (8001250 <timer_run3+0x2c>)
 8001238:	6013      	str	r3, [r2, #0]
		if( timer_counter3 == 0)  timer_flag3 = 1;
 800123a:	4b05      	ldr	r3, [pc, #20]	; (8001250 <timer_run3+0x2c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d102      	bne.n	8001248 <timer_run3+0x24>
 8001242:	4b04      	ldr	r3, [pc, #16]	; (8001254 <timer_run3+0x30>)
 8001244:	2201      	movs	r2, #1
 8001246:	601a      	str	r2, [r3, #0]
	}
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	20000084 	.word	0x20000084
 8001254:	20000088 	.word	0x20000088

08001258 <flag_timer3>:
int flag_timer3(){
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
	if (timer_flag3==1) return 1;
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <flag_timer3+0x1c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d101      	bne.n	8001268 <flag_timer3+0x10>
 8001264:	2301      	movs	r3, #1
 8001266:	e001      	b.n	800126c <flag_timer3+0x14>
	return -1;
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	20000088 	.word	0x20000088

08001278 <setTimer_7SEG>:
///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
static int timer_counter_7SEG;
static int timer_flag_7SEG = 0;
void setTimer_7SEG( int duration ){
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	timer_counter_7SEG = duration / TIMER_CYCLE ;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a08      	ldr	r2, [pc, #32]	; (80012a4 <setTimer_7SEG+0x2c>)
 8001284:	fb82 1203 	smull	r1, r2, r2, r3
 8001288:	1092      	asrs	r2, r2, #2
 800128a:	17db      	asrs	r3, r3, #31
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	4a06      	ldr	r2, [pc, #24]	; (80012a8 <setTimer_7SEG+0x30>)
 8001290:	6013      	str	r3, [r2, #0]
	timer_flag_7SEG = 0;
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <setTimer_7SEG+0x34>)
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	66666667 	.word	0x66666667
 80012a8:	2000008c 	.word	0x2000008c
 80012ac:	20000090 	.word	0x20000090

080012b0 <timer_run_7SEG>:
void timer_run_7SEG(){
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
	if( timer_counter_7SEG > 0){
 80012b4:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <timer_run_7SEG+0x48>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	dd19      	ble.n	80012f0 <timer_run_7SEG+0x40>
		timer_counter_7SEG --;
 80012bc:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <timer_run_7SEG+0x48>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <timer_run_7SEG+0x48>)
 80012c4:	6013      	str	r3, [r2, #0]
		if( timer_counter_7SEG == 49) timer_flag_7SEG = 3;
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <timer_run_7SEG+0x48>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b31      	cmp	r3, #49	; 0x31
 80012cc:	d102      	bne.n	80012d4 <timer_run_7SEG+0x24>
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <timer_run_7SEG+0x4c>)
 80012d0:	2203      	movs	r2, #3
 80012d2:	601a      	str	r2, [r3, #0]
		if( timer_counter_7SEG == 25) timer_flag_7SEG = 2;
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <timer_run_7SEG+0x48>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b19      	cmp	r3, #25
 80012da:	d102      	bne.n	80012e2 <timer_run_7SEG+0x32>
 80012dc:	4b07      	ldr	r3, [pc, #28]	; (80012fc <timer_run_7SEG+0x4c>)
 80012de:	2202      	movs	r2, #2
 80012e0:	601a      	str	r2, [r3, #0]
		if( timer_counter_7SEG == 0)  timer_flag_7SEG = 1;
 80012e2:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <timer_run_7SEG+0x48>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d102      	bne.n	80012f0 <timer_run_7SEG+0x40>
 80012ea:	4b04      	ldr	r3, [pc, #16]	; (80012fc <timer_run_7SEG+0x4c>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	601a      	str	r2, [r3, #0]
	}
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	2000008c 	.word	0x2000008c
 80012fc:	20000090 	.word	0x20000090

08001300 <flag_timer_7SEG>:
int flag_timer_7SEG(){
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
	if (timer_flag_7SEG==3) return 3;
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <flag_timer_7SEG+0x34>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b03      	cmp	r3, #3
 800130a:	d101      	bne.n	8001310 <flag_timer_7SEG+0x10>
 800130c:	2303      	movs	r3, #3
 800130e:	e00d      	b.n	800132c <flag_timer_7SEG+0x2c>
	if (timer_flag_7SEG==2) return 2;
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <flag_timer_7SEG+0x34>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d101      	bne.n	800131c <flag_timer_7SEG+0x1c>
 8001318:	2302      	movs	r3, #2
 800131a:	e007      	b.n	800132c <flag_timer_7SEG+0x2c>
	if (timer_flag_7SEG==1) return 1;
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <flag_timer_7SEG+0x34>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d101      	bne.n	8001328 <flag_timer_7SEG+0x28>
 8001324:	2301      	movs	r3, #1
 8001326:	e001      	b.n	800132c <flag_timer_7SEG+0x2c>
	return -1;
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	20000090 	.word	0x20000090

08001338 <HAL_TIM_PeriodElapsedCallback>:
///////////////////////////////////////////////////////////////////////////////////////////

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	timer_run0();
 8001340:	f7ff fe9e 	bl	8001080 <timer_run0>
	timer_run1();
 8001344:	f7ff fee2 	bl	800110c <timer_run1>
	timer_run2();
 8001348:	f7ff ff26 	bl	8001198 <timer_run2>
	timer_run3();
 800134c:	f7ff ff6a 	bl	8001224 <timer_run3>
	timer_run_7SEG();
 8001350:	f7ff ffae 	bl	80012b0 <timer_run_7SEG>
	if (htim->Instance==TIM2){
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800135c:	d101      	bne.n	8001362 <HAL_TIM_PeriodElapsedCallback+0x2a>
		button_reading();
 800135e:	f7ff fb0d 	bl	800097c <button_reading>
	}
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800136c:	480c      	ldr	r0, [pc, #48]	; (80013a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800136e:	490d      	ldr	r1, [pc, #52]	; (80013a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001370:	4a0d      	ldr	r2, [pc, #52]	; (80013a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001374:	e002      	b.n	800137c <LoopCopyDataInit>

08001376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800137a:	3304      	adds	r3, #4

0800137c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800137c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001380:	d3f9      	bcc.n	8001376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001384:	4c0a      	ldr	r4, [pc, #40]	; (80013b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001388:	e001      	b.n	800138e <LoopFillZerobss>

0800138a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800138a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800138c:	3204      	adds	r2, #4

0800138e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001390:	d3fb      	bcc.n	800138a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001392:	f7ff fe53 	bl	800103c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001396:	f001 fb0d 	bl	80029b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800139a:	f7ff fb87 	bl	8000aac <main>
  bx lr
 800139e:	4770      	bx	lr
  ldr r0, =_sdata
 80013a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a4:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80013a8:	08002a4c 	.word	0x08002a4c
  ldr r2, =_sbss
 80013ac:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80013b0:	200000e0 	.word	0x200000e0

080013b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013b4:	e7fe      	b.n	80013b4 <ADC1_2_IRQHandler>
	...

080013b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <HAL_Init+0x28>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a07      	ldr	r2, [pc, #28]	; (80013e0 <HAL_Init+0x28>)
 80013c2:	f043 0310 	orr.w	r3, r3, #16
 80013c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c8:	2003      	movs	r0, #3
 80013ca:	f000 f923 	bl	8001614 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ce:	200f      	movs	r0, #15
 80013d0:	f000 f808 	bl	80013e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d4:	f7ff fdaa 	bl	8000f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40022000 	.word	0x40022000

080013e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_InitTick+0x54>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_InitTick+0x58>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	4619      	mov	r1, r3
 80013f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f93b 	bl	800167e <HAL_SYSTICK_Config>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e00e      	b.n	8001430 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b0f      	cmp	r3, #15
 8001416:	d80a      	bhi.n	800142e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001418:	2200      	movs	r2, #0
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	f04f 30ff 	mov.w	r0, #4294967295
 8001420:	f000 f903 	bl	800162a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001424:	4a06      	ldr	r2, [pc, #24]	; (8001440 <HAL_InitTick+0x5c>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	e000      	b.n	8001430 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000020 	.word	0x20000020
 800143c:	20000028 	.word	0x20000028
 8001440:	20000024 	.word	0x20000024

08001444 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <HAL_IncTick+0x1c>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	461a      	mov	r2, r3
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_IncTick+0x20>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4413      	add	r3, r2
 8001454:	4a03      	ldr	r2, [pc, #12]	; (8001464 <HAL_IncTick+0x20>)
 8001456:	6013      	str	r3, [r2, #0]
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	20000028 	.word	0x20000028
 8001464:	200000dc 	.word	0x200000dc

08001468 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return uwTick;
 800146c:	4b02      	ldr	r3, [pc, #8]	; (8001478 <HAL_GetTick+0x10>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	200000dc 	.word	0x200000dc

0800147c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001498:	4013      	ands	r3, r2
 800149a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ae:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	60d3      	str	r3, [r2, #12]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <__NVIC_GetPriorityGrouping+0x18>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	0a1b      	lsrs	r3, r3, #8
 80014ce:	f003 0307 	and.w	r3, r3, #7
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	db0b      	blt.n	800150a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	f003 021f 	and.w	r2, r3, #31
 80014f8:	4906      	ldr	r1, [pc, #24]	; (8001514 <__NVIC_EnableIRQ+0x34>)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	095b      	lsrs	r3, r3, #5
 8001500:	2001      	movs	r0, #1
 8001502:	fa00 f202 	lsl.w	r2, r0, r2
 8001506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	e000e100 	.word	0xe000e100

08001518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	2b00      	cmp	r3, #0
 800152a:	db0a      	blt.n	8001542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <__NVIC_SetPriority+0x4c>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	0112      	lsls	r2, r2, #4
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	440b      	add	r3, r1
 800153c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001540:	e00a      	b.n	8001558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4908      	ldr	r1, [pc, #32]	; (8001568 <__NVIC_SetPriority+0x50>)
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	3b04      	subs	r3, #4
 8001550:	0112      	lsls	r2, r2, #4
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	440b      	add	r3, r1
 8001556:	761a      	strb	r2, [r3, #24]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000e100 	.word	0xe000e100
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f1c3 0307 	rsb	r3, r3, #7
 8001586:	2b04      	cmp	r3, #4
 8001588:	bf28      	it	cs
 800158a:	2304      	movcs	r3, #4
 800158c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3304      	adds	r3, #4
 8001592:	2b06      	cmp	r3, #6
 8001594:	d902      	bls.n	800159c <NVIC_EncodePriority+0x30>
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3b03      	subs	r3, #3
 800159a:	e000      	b.n	800159e <NVIC_EncodePriority+0x32>
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	401a      	ands	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b4:	f04f 31ff 	mov.w	r1, #4294967295
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43d9      	mvns	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	4313      	orrs	r3, r2
         );
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3724      	adds	r7, #36	; 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e0:	d301      	bcc.n	80015e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00f      	b.n	8001606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <SysTick_Config+0x40>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ee:	210f      	movs	r1, #15
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295
 80015f4:	f7ff ff90 	bl	8001518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <SysTick_Config+0x40>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <SysTick_Config+0x40>)
 8001600:	2207      	movs	r2, #7
 8001602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	e000e010 	.word	0xe000e010

08001614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff2d 	bl	800147c <__NVIC_SetPriorityGrouping>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800163c:	f7ff ff42 	bl	80014c4 <__NVIC_GetPriorityGrouping>
 8001640:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	6978      	ldr	r0, [r7, #20]
 8001648:	f7ff ff90 	bl	800156c <NVIC_EncodePriority>
 800164c:	4602      	mov	r2, r0
 800164e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff5f 	bl	8001518 <__NVIC_SetPriority>
}
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff35 	bl	80014e0 <__NVIC_EnableIRQ>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff ffa2 	bl	80015d0 <SysTick_Config>
 800168c:	4603      	mov	r3, r0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001698:	b480      	push	{r7}
 800169a:	b08b      	sub	sp, #44	; 0x2c
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016a2:	2300      	movs	r3, #0
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016a6:	2300      	movs	r3, #0
 80016a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016aa:	e148      	b.n	800193e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016ac:	2201      	movs	r2, #1
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	69fa      	ldr	r2, [r7, #28]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	f040 8137 	bne.w	8001938 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	4aa3      	ldr	r2, [pc, #652]	; (800195c <HAL_GPIO_Init+0x2c4>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d05e      	beq.n	8001792 <HAL_GPIO_Init+0xfa>
 80016d4:	4aa1      	ldr	r2, [pc, #644]	; (800195c <HAL_GPIO_Init+0x2c4>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d875      	bhi.n	80017c6 <HAL_GPIO_Init+0x12e>
 80016da:	4aa1      	ldr	r2, [pc, #644]	; (8001960 <HAL_GPIO_Init+0x2c8>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d058      	beq.n	8001792 <HAL_GPIO_Init+0xfa>
 80016e0:	4a9f      	ldr	r2, [pc, #636]	; (8001960 <HAL_GPIO_Init+0x2c8>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d86f      	bhi.n	80017c6 <HAL_GPIO_Init+0x12e>
 80016e6:	4a9f      	ldr	r2, [pc, #636]	; (8001964 <HAL_GPIO_Init+0x2cc>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d052      	beq.n	8001792 <HAL_GPIO_Init+0xfa>
 80016ec:	4a9d      	ldr	r2, [pc, #628]	; (8001964 <HAL_GPIO_Init+0x2cc>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d869      	bhi.n	80017c6 <HAL_GPIO_Init+0x12e>
 80016f2:	4a9d      	ldr	r2, [pc, #628]	; (8001968 <HAL_GPIO_Init+0x2d0>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d04c      	beq.n	8001792 <HAL_GPIO_Init+0xfa>
 80016f8:	4a9b      	ldr	r2, [pc, #620]	; (8001968 <HAL_GPIO_Init+0x2d0>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d863      	bhi.n	80017c6 <HAL_GPIO_Init+0x12e>
 80016fe:	4a9b      	ldr	r2, [pc, #620]	; (800196c <HAL_GPIO_Init+0x2d4>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d046      	beq.n	8001792 <HAL_GPIO_Init+0xfa>
 8001704:	4a99      	ldr	r2, [pc, #612]	; (800196c <HAL_GPIO_Init+0x2d4>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d85d      	bhi.n	80017c6 <HAL_GPIO_Init+0x12e>
 800170a:	2b12      	cmp	r3, #18
 800170c:	d82a      	bhi.n	8001764 <HAL_GPIO_Init+0xcc>
 800170e:	2b12      	cmp	r3, #18
 8001710:	d859      	bhi.n	80017c6 <HAL_GPIO_Init+0x12e>
 8001712:	a201      	add	r2, pc, #4	; (adr r2, 8001718 <HAL_GPIO_Init+0x80>)
 8001714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001718:	08001793 	.word	0x08001793
 800171c:	0800176d 	.word	0x0800176d
 8001720:	0800177f 	.word	0x0800177f
 8001724:	080017c1 	.word	0x080017c1
 8001728:	080017c7 	.word	0x080017c7
 800172c:	080017c7 	.word	0x080017c7
 8001730:	080017c7 	.word	0x080017c7
 8001734:	080017c7 	.word	0x080017c7
 8001738:	080017c7 	.word	0x080017c7
 800173c:	080017c7 	.word	0x080017c7
 8001740:	080017c7 	.word	0x080017c7
 8001744:	080017c7 	.word	0x080017c7
 8001748:	080017c7 	.word	0x080017c7
 800174c:	080017c7 	.word	0x080017c7
 8001750:	080017c7 	.word	0x080017c7
 8001754:	080017c7 	.word	0x080017c7
 8001758:	080017c7 	.word	0x080017c7
 800175c:	08001775 	.word	0x08001775
 8001760:	08001789 	.word	0x08001789
 8001764:	4a82      	ldr	r2, [pc, #520]	; (8001970 <HAL_GPIO_Init+0x2d8>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d013      	beq.n	8001792 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800176a:	e02c      	b.n	80017c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	623b      	str	r3, [r7, #32]
          break;
 8001772:	e029      	b.n	80017c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	3304      	adds	r3, #4
 800177a:	623b      	str	r3, [r7, #32]
          break;
 800177c:	e024      	b.n	80017c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	3308      	adds	r3, #8
 8001784:	623b      	str	r3, [r7, #32]
          break;
 8001786:	e01f      	b.n	80017c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	330c      	adds	r3, #12
 800178e:	623b      	str	r3, [r7, #32]
          break;
 8001790:	e01a      	b.n	80017c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d102      	bne.n	80017a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800179a:	2304      	movs	r3, #4
 800179c:	623b      	str	r3, [r7, #32]
          break;
 800179e:	e013      	b.n	80017c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d105      	bne.n	80017b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017a8:	2308      	movs	r3, #8
 80017aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69fa      	ldr	r2, [r7, #28]
 80017b0:	611a      	str	r2, [r3, #16]
          break;
 80017b2:	e009      	b.n	80017c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017b4:	2308      	movs	r3, #8
 80017b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69fa      	ldr	r2, [r7, #28]
 80017bc:	615a      	str	r2, [r3, #20]
          break;
 80017be:	e003      	b.n	80017c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017c0:	2300      	movs	r3, #0
 80017c2:	623b      	str	r3, [r7, #32]
          break;
 80017c4:	e000      	b.n	80017c8 <HAL_GPIO_Init+0x130>
          break;
 80017c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	2bff      	cmp	r3, #255	; 0xff
 80017cc:	d801      	bhi.n	80017d2 <HAL_GPIO_Init+0x13a>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	e001      	b.n	80017d6 <HAL_GPIO_Init+0x13e>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3304      	adds	r3, #4
 80017d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	2bff      	cmp	r3, #255	; 0xff
 80017dc:	d802      	bhi.n	80017e4 <HAL_GPIO_Init+0x14c>
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	e002      	b.n	80017ea <HAL_GPIO_Init+0x152>
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	3b08      	subs	r3, #8
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	210f      	movs	r1, #15
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	fa01 f303 	lsl.w	r3, r1, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	401a      	ands	r2, r3
 80017fc:	6a39      	ldr	r1, [r7, #32]
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	fa01 f303 	lsl.w	r3, r1, r3
 8001804:	431a      	orrs	r2, r3
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 8090 	beq.w	8001938 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001818:	4b56      	ldr	r3, [pc, #344]	; (8001974 <HAL_GPIO_Init+0x2dc>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	4a55      	ldr	r2, [pc, #340]	; (8001974 <HAL_GPIO_Init+0x2dc>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6193      	str	r3, [r2, #24]
 8001824:	4b53      	ldr	r3, [pc, #332]	; (8001974 <HAL_GPIO_Init+0x2dc>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001830:	4a51      	ldr	r2, [pc, #324]	; (8001978 <HAL_GPIO_Init+0x2e0>)
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	089b      	lsrs	r3, r3, #2
 8001836:	3302      	adds	r3, #2
 8001838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	220f      	movs	r2, #15
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	4013      	ands	r3, r2
 8001852:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a49      	ldr	r2, [pc, #292]	; (800197c <HAL_GPIO_Init+0x2e4>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d00d      	beq.n	8001878 <HAL_GPIO_Init+0x1e0>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a48      	ldr	r2, [pc, #288]	; (8001980 <HAL_GPIO_Init+0x2e8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d007      	beq.n	8001874 <HAL_GPIO_Init+0x1dc>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a47      	ldr	r2, [pc, #284]	; (8001984 <HAL_GPIO_Init+0x2ec>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d101      	bne.n	8001870 <HAL_GPIO_Init+0x1d8>
 800186c:	2302      	movs	r3, #2
 800186e:	e004      	b.n	800187a <HAL_GPIO_Init+0x1e2>
 8001870:	2303      	movs	r3, #3
 8001872:	e002      	b.n	800187a <HAL_GPIO_Init+0x1e2>
 8001874:	2301      	movs	r3, #1
 8001876:	e000      	b.n	800187a <HAL_GPIO_Init+0x1e2>
 8001878:	2300      	movs	r3, #0
 800187a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800187c:	f002 0203 	and.w	r2, r2, #3
 8001880:	0092      	lsls	r2, r2, #2
 8001882:	4093      	lsls	r3, r2
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	4313      	orrs	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800188a:	493b      	ldr	r1, [pc, #236]	; (8001978 <HAL_GPIO_Init+0x2e0>)
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	089b      	lsrs	r3, r3, #2
 8001890:	3302      	adds	r3, #2
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d006      	beq.n	80018b2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018a4:	4b38      	ldr	r3, [pc, #224]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4937      	ldr	r1, [pc, #220]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	600b      	str	r3, [r1, #0]
 80018b0:	e006      	b.n	80018c0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018b2:	4b35      	ldr	r3, [pc, #212]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	4933      	ldr	r1, [pc, #204]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 80018bc:	4013      	ands	r3, r2
 80018be:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d006      	beq.n	80018da <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018cc:	4b2e      	ldr	r3, [pc, #184]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	492d      	ldr	r1, [pc, #180]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	604b      	str	r3, [r1, #4]
 80018d8:	e006      	b.n	80018e8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018da:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	4929      	ldr	r1, [pc, #164]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d006      	beq.n	8001902 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018f4:	4b24      	ldr	r3, [pc, #144]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	4923      	ldr	r1, [pc, #140]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	608b      	str	r3, [r1, #8]
 8001900:	e006      	b.n	8001910 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001902:	4b21      	ldr	r3, [pc, #132]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 8001904:	689a      	ldr	r2, [r3, #8]
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	43db      	mvns	r3, r3
 800190a:	491f      	ldr	r1, [pc, #124]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 800190c:	4013      	ands	r3, r2
 800190e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d006      	beq.n	800192a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800191c:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	4919      	ldr	r1, [pc, #100]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	60cb      	str	r3, [r1, #12]
 8001928:	e006      	b.n	8001938 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800192a:	4b17      	ldr	r3, [pc, #92]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 800192c:	68da      	ldr	r2, [r3, #12]
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	43db      	mvns	r3, r3
 8001932:	4915      	ldr	r1, [pc, #84]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 8001934:	4013      	ands	r3, r2
 8001936:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	3301      	adds	r3, #1
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	fa22 f303 	lsr.w	r3, r2, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	f47f aeaf 	bne.w	80016ac <HAL_GPIO_Init+0x14>
  }
}
 800194e:	bf00      	nop
 8001950:	bf00      	nop
 8001952:	372c      	adds	r7, #44	; 0x2c
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	10320000 	.word	0x10320000
 8001960:	10310000 	.word	0x10310000
 8001964:	10220000 	.word	0x10220000
 8001968:	10210000 	.word	0x10210000
 800196c:	10120000 	.word	0x10120000
 8001970:	10110000 	.word	0x10110000
 8001974:	40021000 	.word	0x40021000
 8001978:	40010000 	.word	0x40010000
 800197c:	40010800 	.word	0x40010800
 8001980:	40010c00 	.word	0x40010c00
 8001984:	40011000 	.word	0x40011000
 8001988:	40010400 	.word	0x40010400

0800198c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	887b      	ldrh	r3, [r7, #2]
 800199e:	4013      	ands	r3, r2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d002      	beq.n	80019aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019a4:	2301      	movs	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
 80019a8:	e001      	b.n	80019ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	460b      	mov	r3, r1
 80019c4:	807b      	strh	r3, [r7, #2]
 80019c6:	4613      	mov	r3, r2
 80019c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019ca:	787b      	ldrb	r3, [r7, #1]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019d0:	887a      	ldrh	r2, [r7, #2]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019d6:	e003      	b.n	80019e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019d8:	887b      	ldrh	r3, [r7, #2]
 80019da:	041a      	lsls	r2, r3, #16
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	611a      	str	r2, [r3, #16]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr

080019ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b085      	sub	sp, #20
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	460b      	mov	r3, r1
 80019f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019fc:	887a      	ldrh	r2, [r7, #2]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4013      	ands	r3, r2
 8001a02:	041a      	lsls	r2, r3, #16
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	43d9      	mvns	r1, r3
 8001a08:	887b      	ldrh	r3, [r7, #2]
 8001a0a:	400b      	ands	r3, r1
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	611a      	str	r2, [r3, #16]
}
 8001a12:	bf00      	nop
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e26c      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 8087 	beq.w	8001b4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a3c:	4b92      	ldr	r3, [pc, #584]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 030c 	and.w	r3, r3, #12
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d00c      	beq.n	8001a62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a48:	4b8f      	ldr	r3, [pc, #572]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 030c 	and.w	r3, r3, #12
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d112      	bne.n	8001a7a <HAL_RCC_OscConfig+0x5e>
 8001a54:	4b8c      	ldr	r3, [pc, #560]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a60:	d10b      	bne.n	8001a7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a62:	4b89      	ldr	r3, [pc, #548]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d06c      	beq.n	8001b48 <HAL_RCC_OscConfig+0x12c>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d168      	bne.n	8001b48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e246      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a82:	d106      	bne.n	8001a92 <HAL_RCC_OscConfig+0x76>
 8001a84:	4b80      	ldr	r3, [pc, #512]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a7f      	ldr	r2, [pc, #508]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	e02e      	b.n	8001af0 <HAL_RCC_OscConfig+0xd4>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10c      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x98>
 8001a9a:	4b7b      	ldr	r3, [pc, #492]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a7a      	ldr	r2, [pc, #488]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	4b78      	ldr	r3, [pc, #480]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a77      	ldr	r2, [pc, #476]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	e01d      	b.n	8001af0 <HAL_RCC_OscConfig+0xd4>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001abc:	d10c      	bne.n	8001ad8 <HAL_RCC_OscConfig+0xbc>
 8001abe:	4b72      	ldr	r3, [pc, #456]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a71      	ldr	r2, [pc, #452]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	4b6f      	ldr	r3, [pc, #444]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a6e      	ldr	r2, [pc, #440]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	e00b      	b.n	8001af0 <HAL_RCC_OscConfig+0xd4>
 8001ad8:	4b6b      	ldr	r3, [pc, #428]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a6a      	ldr	r2, [pc, #424]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b68      	ldr	r3, [pc, #416]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a67      	ldr	r2, [pc, #412]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d013      	beq.n	8001b20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af8:	f7ff fcb6 	bl	8001468 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b00:	f7ff fcb2 	bl	8001468 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	; 0x64
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e1fa      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b12:	4b5d      	ldr	r3, [pc, #372]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0xe4>
 8001b1e:	e014      	b.n	8001b4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7ff fca2 	bl	8001468 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b28:	f7ff fc9e 	bl	8001468 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	; 0x64
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e1e6      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3a:	4b53      	ldr	r3, [pc, #332]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x10c>
 8001b46:	e000      	b.n	8001b4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d063      	beq.n	8001c1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b56:	4b4c      	ldr	r3, [pc, #304]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00b      	beq.n	8001b7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b62:	4b49      	ldr	r3, [pc, #292]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	2b08      	cmp	r3, #8
 8001b6c:	d11c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x18c>
 8001b6e:	4b46      	ldr	r3, [pc, #280]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d116      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b7a:	4b43      	ldr	r3, [pc, #268]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d005      	beq.n	8001b92 <HAL_RCC_OscConfig+0x176>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d001      	beq.n	8001b92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e1ba      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b92:	4b3d      	ldr	r3, [pc, #244]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4939      	ldr	r1, [pc, #228]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba6:	e03a      	b.n	8001c1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d020      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bb0:	4b36      	ldr	r3, [pc, #216]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb6:	f7ff fc57 	bl	8001468 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bbe:	f7ff fc53 	bl	8001468 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e19b      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd0:	4b2d      	ldr	r3, [pc, #180]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0f0      	beq.n	8001bbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bdc:	4b2a      	ldr	r3, [pc, #168]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	4927      	ldr	r1, [pc, #156]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	600b      	str	r3, [r1, #0]
 8001bf0:	e015      	b.n	8001c1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bf2:	4b26      	ldr	r3, [pc, #152]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf8:	f7ff fc36 	bl	8001468 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c00:	f7ff fc32 	bl	8001468 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e17a      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c12:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d03a      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d019      	beq.n	8001c66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c32:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c38:	f7ff fc16 	bl	8001468 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c40:	f7ff fc12 	bl	8001468 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e15a      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c52:	4b0d      	ldr	r3, [pc, #52]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c5e:	2001      	movs	r0, #1
 8001c60:	f000 faa6 	bl	80021b0 <RCC_Delay>
 8001c64:	e01c      	b.n	8001ca0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6c:	f7ff fbfc 	bl	8001468 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c72:	e00f      	b.n	8001c94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c74:	f7ff fbf8 	bl	8001468 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d908      	bls.n	8001c94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e140      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
 8001c86:	bf00      	nop
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	42420000 	.word	0x42420000
 8001c90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c94:	4b9e      	ldr	r3, [pc, #632]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1e9      	bne.n	8001c74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 80a6 	beq.w	8001dfa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb2:	4b97      	ldr	r3, [pc, #604]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10d      	bne.n	8001cda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cbe:	4b94      	ldr	r3, [pc, #592]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	4a93      	ldr	r2, [pc, #588]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	61d3      	str	r3, [r2, #28]
 8001cca:	4b91      	ldr	r3, [pc, #580]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cda:	4b8e      	ldr	r3, [pc, #568]	; (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d118      	bne.n	8001d18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ce6:	4b8b      	ldr	r3, [pc, #556]	; (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a8a      	ldr	r2, [pc, #552]	; (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf2:	f7ff fbb9 	bl	8001468 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cfa:	f7ff fbb5 	bl	8001468 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b64      	cmp	r3, #100	; 0x64
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e0fd      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0c:	4b81      	ldr	r3, [pc, #516]	; (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d106      	bne.n	8001d2e <HAL_RCC_OscConfig+0x312>
 8001d20:	4b7b      	ldr	r3, [pc, #492]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	4a7a      	ldr	r2, [pc, #488]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6213      	str	r3, [r2, #32]
 8001d2c:	e02d      	b.n	8001d8a <HAL_RCC_OscConfig+0x36e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x334>
 8001d36:	4b76      	ldr	r3, [pc, #472]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	4a75      	ldr	r2, [pc, #468]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	6213      	str	r3, [r2, #32]
 8001d42:	4b73      	ldr	r3, [pc, #460]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	4a72      	ldr	r2, [pc, #456]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001d48:	f023 0304 	bic.w	r3, r3, #4
 8001d4c:	6213      	str	r3, [r2, #32]
 8001d4e:	e01c      	b.n	8001d8a <HAL_RCC_OscConfig+0x36e>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	2b05      	cmp	r3, #5
 8001d56:	d10c      	bne.n	8001d72 <HAL_RCC_OscConfig+0x356>
 8001d58:	4b6d      	ldr	r3, [pc, #436]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	4a6c      	ldr	r2, [pc, #432]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001d5e:	f043 0304 	orr.w	r3, r3, #4
 8001d62:	6213      	str	r3, [r2, #32]
 8001d64:	4b6a      	ldr	r3, [pc, #424]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	4a69      	ldr	r2, [pc, #420]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	6213      	str	r3, [r2, #32]
 8001d70:	e00b      	b.n	8001d8a <HAL_RCC_OscConfig+0x36e>
 8001d72:	4b67      	ldr	r3, [pc, #412]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	4a66      	ldr	r2, [pc, #408]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001d78:	f023 0301 	bic.w	r3, r3, #1
 8001d7c:	6213      	str	r3, [r2, #32]
 8001d7e:	4b64      	ldr	r3, [pc, #400]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	4a63      	ldr	r2, [pc, #396]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001d84:	f023 0304 	bic.w	r3, r3, #4
 8001d88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d015      	beq.n	8001dbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d92:	f7ff fb69 	bl	8001468 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d98:	e00a      	b.n	8001db0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9a:	f7ff fb65 	bl	8001468 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e0ab      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db0:	4b57      	ldr	r3, [pc, #348]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0ee      	beq.n	8001d9a <HAL_RCC_OscConfig+0x37e>
 8001dbc:	e014      	b.n	8001de8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dbe:	f7ff fb53 	bl	8001468 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc4:	e00a      	b.n	8001ddc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc6:	f7ff fb4f 	bl	8001468 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e095      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ddc:	4b4c      	ldr	r3, [pc, #304]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1ee      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001de8:	7dfb      	ldrb	r3, [r7, #23]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d105      	bne.n	8001dfa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dee:	4b48      	ldr	r3, [pc, #288]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	4a47      	ldr	r2, [pc, #284]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001df8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 8081 	beq.w	8001f06 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e04:	4b42      	ldr	r3, [pc, #264]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 030c 	and.w	r3, r3, #12
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d061      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d146      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e18:	4b3f      	ldr	r3, [pc, #252]	; (8001f18 <HAL_RCC_OscConfig+0x4fc>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1e:	f7ff fb23 	bl	8001468 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e26:	f7ff fb1f 	bl	8001468 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e067      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e38:	4b35      	ldr	r3, [pc, #212]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1f0      	bne.n	8001e26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e4c:	d108      	bne.n	8001e60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e4e:	4b30      	ldr	r3, [pc, #192]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	492d      	ldr	r1, [pc, #180]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e60:	4b2b      	ldr	r3, [pc, #172]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a19      	ldr	r1, [r3, #32]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	430b      	orrs	r3, r1
 8001e72:	4927      	ldr	r1, [pc, #156]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e78:	4b27      	ldr	r3, [pc, #156]	; (8001f18 <HAL_RCC_OscConfig+0x4fc>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7e:	f7ff faf3 	bl	8001468 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e86:	f7ff faef 	bl	8001468 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e037      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e98:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x46a>
 8001ea4:	e02f      	b.n	8001f06 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea6:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <HAL_RCC_OscConfig+0x4fc>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7ff fadc 	bl	8001468 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb4:	f7ff fad8 	bl	8001468 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e020      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec6:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x498>
 8001ed2:	e018      	b.n	8001f06 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d101      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e013      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d106      	bne.n	8001f02 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d001      	beq.n	8001f06 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40007000 	.word	0x40007000
 8001f18:	42420060 	.word	0x42420060

08001f1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e0d0      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f30:	4b6a      	ldr	r3, [pc, #424]	; (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d910      	bls.n	8001f60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3e:	4b67      	ldr	r3, [pc, #412]	; (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 0207 	bic.w	r2, r3, #7
 8001f46:	4965      	ldr	r1, [pc, #404]	; (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4e:	4b63      	ldr	r3, [pc, #396]	; (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e0b8      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d020      	beq.n	8001fae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f78:	4b59      	ldr	r3, [pc, #356]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	4a58      	ldr	r2, [pc, #352]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f90:	4b53      	ldr	r3, [pc, #332]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	4a52      	ldr	r2, [pc, #328]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f9c:	4b50      	ldr	r3, [pc, #320]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	494d      	ldr	r1, [pc, #308]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d040      	beq.n	800203c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d107      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc2:	4b47      	ldr	r3, [pc, #284]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d115      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e07f      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d107      	bne.n	8001fea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fda:	4b41      	ldr	r3, [pc, #260]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d109      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e073      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fea:	4b3d      	ldr	r3, [pc, #244]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e06b      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ffa:	4b39      	ldr	r3, [pc, #228]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f023 0203 	bic.w	r2, r3, #3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	4936      	ldr	r1, [pc, #216]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	4313      	orrs	r3, r2
 800200a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800200c:	f7ff fa2c 	bl	8001468 <HAL_GetTick>
 8002010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002012:	e00a      	b.n	800202a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002014:	f7ff fa28 	bl	8001468 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002022:	4293      	cmp	r3, r2
 8002024:	d901      	bls.n	800202a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e053      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202a:	4b2d      	ldr	r3, [pc, #180]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 020c 	and.w	r2, r3, #12
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	429a      	cmp	r2, r3
 800203a:	d1eb      	bne.n	8002014 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800203c:	4b27      	ldr	r3, [pc, #156]	; (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d210      	bcs.n	800206c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204a:	4b24      	ldr	r3, [pc, #144]	; (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 0207 	bic.w	r2, r3, #7
 8002052:	4922      	ldr	r1, [pc, #136]	; (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800205a:	4b20      	ldr	r3, [pc, #128]	; (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d001      	beq.n	800206c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e032      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b00      	cmp	r3, #0
 8002076:	d008      	beq.n	800208a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002078:	4b19      	ldr	r3, [pc, #100]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4916      	ldr	r1, [pc, #88]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	4313      	orrs	r3, r2
 8002088:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	2b00      	cmp	r3, #0
 8002094:	d009      	beq.n	80020aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002096:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	490e      	ldr	r1, [pc, #56]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020aa:	f000 f821 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 80020ae:	4602      	mov	r2, r0
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	490a      	ldr	r1, [pc, #40]	; (80020e4 <HAL_RCC_ClockConfig+0x1c8>)
 80020bc:	5ccb      	ldrb	r3, [r1, r3]
 80020be:	fa22 f303 	lsr.w	r3, r2, r3
 80020c2:	4a09      	ldr	r2, [pc, #36]	; (80020e8 <HAL_RCC_ClockConfig+0x1cc>)
 80020c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <HAL_RCC_ClockConfig+0x1d0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff f98a 	bl	80013e4 <HAL_InitTick>

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40022000 	.word	0x40022000
 80020e0:	40021000 	.word	0x40021000
 80020e4:	08002a34 	.word	0x08002a34
 80020e8:	20000020 	.word	0x20000020
 80020ec:	20000024 	.word	0x20000024

080020f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f0:	b490      	push	{r4, r7}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020f6:	4b2a      	ldr	r3, [pc, #168]	; (80021a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020f8:	1d3c      	adds	r4, r7, #4
 80020fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002100:	f240 2301 	movw	r3, #513	; 0x201
 8002104:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
 800210e:	2300      	movs	r3, #0
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002116:	2300      	movs	r3, #0
 8002118:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800211a:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f003 030c 	and.w	r3, r3, #12
 8002126:	2b04      	cmp	r3, #4
 8002128:	d002      	beq.n	8002130 <HAL_RCC_GetSysClockFreq+0x40>
 800212a:	2b08      	cmp	r3, #8
 800212c:	d003      	beq.n	8002136 <HAL_RCC_GetSysClockFreq+0x46>
 800212e:	e02d      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002130:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002132:	623b      	str	r3, [r7, #32]
      break;
 8002134:	e02d      	b.n	8002192 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	0c9b      	lsrs	r3, r3, #18
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002142:	4413      	add	r3, r2
 8002144:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002148:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d013      	beq.n	800217c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002154:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	0c5b      	lsrs	r3, r3, #17
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002162:	4413      	add	r3, r2
 8002164:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002168:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	4a0e      	ldr	r2, [pc, #56]	; (80021a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800216e:	fb02 f203 	mul.w	r2, r2, r3
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	fbb2 f3f3 	udiv	r3, r2, r3
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
 800217a:	e004      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	4a0b      	ldr	r2, [pc, #44]	; (80021ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002180:	fb02 f303 	mul.w	r3, r2, r3
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	623b      	str	r3, [r7, #32]
      break;
 800218a:	e002      	b.n	8002192 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800218e:	623b      	str	r3, [r7, #32]
      break;
 8002190:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002192:	6a3b      	ldr	r3, [r7, #32]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3728      	adds	r7, #40	; 0x28
 8002198:	46bd      	mov	sp, r7
 800219a:	bc90      	pop	{r4, r7}
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	08002a24 	.word	0x08002a24
 80021a4:	40021000 	.word	0x40021000
 80021a8:	007a1200 	.word	0x007a1200
 80021ac:	003d0900 	.word	0x003d0900

080021b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021b8:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <RCC_Delay+0x34>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a0a      	ldr	r2, [pc, #40]	; (80021e8 <RCC_Delay+0x38>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	0a5b      	lsrs	r3, r3, #9
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	fb02 f303 	mul.w	r3, r2, r3
 80021ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021cc:	bf00      	nop
  }
  while (Delay --);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1e5a      	subs	r2, r3, #1
 80021d2:	60fa      	str	r2, [r7, #12]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1f9      	bne.n	80021cc <RCC_Delay+0x1c>
}
 80021d8:	bf00      	nop
 80021da:	bf00      	nop
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	20000020 	.word	0x20000020
 80021e8:	10624dd3 	.word	0x10624dd3

080021ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e041      	b.n	8002282 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d106      	bne.n	8002218 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7fe febc 	bl	8000f90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2202      	movs	r2, #2
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3304      	adds	r3, #4
 8002228:	4619      	mov	r1, r3
 800222a:	4610      	mov	r0, r2
 800222c:	f000 fa6a 	bl	8002704 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b01      	cmp	r3, #1
 800229e:	d001      	beq.n	80022a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e035      	b.n	8002310 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2202      	movs	r2, #2
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a16      	ldr	r2, [pc, #88]	; (800231c <HAL_TIM_Base_Start_IT+0x90>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d009      	beq.n	80022da <HAL_TIM_Base_Start_IT+0x4e>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ce:	d004      	beq.n	80022da <HAL_TIM_Base_Start_IT+0x4e>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a12      	ldr	r2, [pc, #72]	; (8002320 <HAL_TIM_Base_Start_IT+0x94>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d111      	bne.n	80022fe <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2b06      	cmp	r3, #6
 80022ea:	d010      	beq.n	800230e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0201 	orr.w	r2, r2, #1
 80022fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022fc:	e007      	b.n	800230e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f042 0201 	orr.w	r2, r2, #1
 800230c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40012c00 	.word	0x40012c00
 8002320:	40000400 	.word	0x40000400

08002324 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b02      	cmp	r3, #2
 8002338:	d122      	bne.n	8002380 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b02      	cmp	r3, #2
 8002346:	d11b      	bne.n	8002380 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f06f 0202 	mvn.w	r2, #2
 8002350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f9b1 	bl	80026ce <HAL_TIM_IC_CaptureCallback>
 800236c:	e005      	b.n	800237a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f9a4 	bl	80026bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 f9b3 	bl	80026e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	2b04      	cmp	r3, #4
 800238c:	d122      	bne.n	80023d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b04      	cmp	r3, #4
 800239a:	d11b      	bne.n	80023d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0204 	mvn.w	r2, #4
 80023a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2202      	movs	r2, #2
 80023aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f987 	bl	80026ce <HAL_TIM_IC_CaptureCallback>
 80023c0:	e005      	b.n	80023ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f97a 	bl	80026bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f989 	bl	80026e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d122      	bne.n	8002428 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d11b      	bne.n	8002428 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f06f 0208 	mvn.w	r2, #8
 80023f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2204      	movs	r2, #4
 80023fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f95d 	bl	80026ce <HAL_TIM_IC_CaptureCallback>
 8002414:	e005      	b.n	8002422 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f950 	bl	80026bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f95f 	bl	80026e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	f003 0310 	and.w	r3, r3, #16
 8002432:	2b10      	cmp	r3, #16
 8002434:	d122      	bne.n	800247c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0310 	and.w	r3, r3, #16
 8002440:	2b10      	cmp	r3, #16
 8002442:	d11b      	bne.n	800247c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f06f 0210 	mvn.w	r2, #16
 800244c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2208      	movs	r2, #8
 8002452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f933 	bl	80026ce <HAL_TIM_IC_CaptureCallback>
 8002468:	e005      	b.n	8002476 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f926 	bl	80026bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f935 	bl	80026e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b01      	cmp	r3, #1
 8002488:	d10e      	bne.n	80024a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b01      	cmp	r3, #1
 8002496:	d107      	bne.n	80024a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f06f 0201 	mvn.w	r2, #1
 80024a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7fe ff48 	bl	8001338 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b2:	2b80      	cmp	r3, #128	; 0x80
 80024b4:	d10e      	bne.n	80024d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c0:	2b80      	cmp	r3, #128	; 0x80
 80024c2:	d107      	bne.n	80024d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 fa67 	bl	80029a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024de:	2b40      	cmp	r3, #64	; 0x40
 80024e0:	d10e      	bne.n	8002500 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ec:	2b40      	cmp	r3, #64	; 0x40
 80024ee:	d107      	bne.n	8002500 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f8f9 	bl	80026f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	f003 0320 	and.w	r3, r3, #32
 800250a:	2b20      	cmp	r3, #32
 800250c:	d10e      	bne.n	800252c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 0320 	and.w	r3, r3, #32
 8002518:	2b20      	cmp	r3, #32
 800251a:	d107      	bne.n	800252c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f06f 0220 	mvn.w	r2, #32
 8002524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 fa32 	bl	8002990 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800252c:	bf00      	nop
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002544:	2b01      	cmp	r3, #1
 8002546:	d101      	bne.n	800254c <HAL_TIM_ConfigClockSource+0x18>
 8002548:	2302      	movs	r3, #2
 800254a:	e0b3      	b.n	80026b4 <HAL_TIM_ConfigClockSource+0x180>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800256a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002572:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002584:	d03e      	beq.n	8002604 <HAL_TIM_ConfigClockSource+0xd0>
 8002586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800258a:	f200 8087 	bhi.w	800269c <HAL_TIM_ConfigClockSource+0x168>
 800258e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002592:	f000 8085 	beq.w	80026a0 <HAL_TIM_ConfigClockSource+0x16c>
 8002596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800259a:	d87f      	bhi.n	800269c <HAL_TIM_ConfigClockSource+0x168>
 800259c:	2b70      	cmp	r3, #112	; 0x70
 800259e:	d01a      	beq.n	80025d6 <HAL_TIM_ConfigClockSource+0xa2>
 80025a0:	2b70      	cmp	r3, #112	; 0x70
 80025a2:	d87b      	bhi.n	800269c <HAL_TIM_ConfigClockSource+0x168>
 80025a4:	2b60      	cmp	r3, #96	; 0x60
 80025a6:	d050      	beq.n	800264a <HAL_TIM_ConfigClockSource+0x116>
 80025a8:	2b60      	cmp	r3, #96	; 0x60
 80025aa:	d877      	bhi.n	800269c <HAL_TIM_ConfigClockSource+0x168>
 80025ac:	2b50      	cmp	r3, #80	; 0x50
 80025ae:	d03c      	beq.n	800262a <HAL_TIM_ConfigClockSource+0xf6>
 80025b0:	2b50      	cmp	r3, #80	; 0x50
 80025b2:	d873      	bhi.n	800269c <HAL_TIM_ConfigClockSource+0x168>
 80025b4:	2b40      	cmp	r3, #64	; 0x40
 80025b6:	d058      	beq.n	800266a <HAL_TIM_ConfigClockSource+0x136>
 80025b8:	2b40      	cmp	r3, #64	; 0x40
 80025ba:	d86f      	bhi.n	800269c <HAL_TIM_ConfigClockSource+0x168>
 80025bc:	2b30      	cmp	r3, #48	; 0x30
 80025be:	d064      	beq.n	800268a <HAL_TIM_ConfigClockSource+0x156>
 80025c0:	2b30      	cmp	r3, #48	; 0x30
 80025c2:	d86b      	bhi.n	800269c <HAL_TIM_ConfigClockSource+0x168>
 80025c4:	2b20      	cmp	r3, #32
 80025c6:	d060      	beq.n	800268a <HAL_TIM_ConfigClockSource+0x156>
 80025c8:	2b20      	cmp	r3, #32
 80025ca:	d867      	bhi.n	800269c <HAL_TIM_ConfigClockSource+0x168>
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d05c      	beq.n	800268a <HAL_TIM_ConfigClockSource+0x156>
 80025d0:	2b10      	cmp	r3, #16
 80025d2:	d05a      	beq.n	800268a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80025d4:	e062      	b.n	800269c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	6899      	ldr	r1, [r3, #8]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f000 f95c 	bl	80028a2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	609a      	str	r2, [r3, #8]
      break;
 8002602:	e04e      	b.n	80026a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	6899      	ldr	r1, [r3, #8]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f000 f945 	bl	80028a2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002626:	609a      	str	r2, [r3, #8]
      break;
 8002628:	e03b      	b.n	80026a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	6859      	ldr	r1, [r3, #4]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	461a      	mov	r2, r3
 8002638:	f000 f8bc 	bl	80027b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2150      	movs	r1, #80	; 0x50
 8002642:	4618      	mov	r0, r3
 8002644:	f000 f913 	bl	800286e <TIM_ITRx_SetConfig>
      break;
 8002648:	e02b      	b.n	80026a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	6859      	ldr	r1, [r3, #4]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	461a      	mov	r2, r3
 8002658:	f000 f8da 	bl	8002810 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2160      	movs	r1, #96	; 0x60
 8002662:	4618      	mov	r0, r3
 8002664:	f000 f903 	bl	800286e <TIM_ITRx_SetConfig>
      break;
 8002668:	e01b      	b.n	80026a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6818      	ldr	r0, [r3, #0]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	6859      	ldr	r1, [r3, #4]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	461a      	mov	r2, r3
 8002678:	f000 f89c 	bl	80027b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2140      	movs	r1, #64	; 0x40
 8002682:	4618      	mov	r0, r3
 8002684:	f000 f8f3 	bl	800286e <TIM_ITRx_SetConfig>
      break;
 8002688:	e00b      	b.n	80026a2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4619      	mov	r1, r3
 8002694:	4610      	mov	r0, r2
 8002696:	f000 f8ea 	bl	800286e <TIM_ITRx_SetConfig>
        break;
 800269a:	e002      	b.n	80026a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800269c:	bf00      	nop
 800269e:	e000      	b.n	80026a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr

080026ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr

080026e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr

080026f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr

08002704 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a25      	ldr	r2, [pc, #148]	; (80027ac <TIM_Base_SetConfig+0xa8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d007      	beq.n	800272c <TIM_Base_SetConfig+0x28>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002722:	d003      	beq.n	800272c <TIM_Base_SetConfig+0x28>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a22      	ldr	r2, [pc, #136]	; (80027b0 <TIM_Base_SetConfig+0xac>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d108      	bne.n	800273e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a1a      	ldr	r2, [pc, #104]	; (80027ac <TIM_Base_SetConfig+0xa8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d007      	beq.n	8002756 <TIM_Base_SetConfig+0x52>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800274c:	d003      	beq.n	8002756 <TIM_Base_SetConfig+0x52>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a17      	ldr	r2, [pc, #92]	; (80027b0 <TIM_Base_SetConfig+0xac>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d108      	bne.n	8002768 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800275c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4313      	orrs	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	4313      	orrs	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a07      	ldr	r2, [pc, #28]	; (80027ac <TIM_Base_SetConfig+0xa8>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d103      	bne.n	800279c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	615a      	str	r2, [r3, #20]
}
 80027a2:	bf00      	nop
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr
 80027ac:	40012c00 	.word	0x40012c00
 80027b0:	40000400 	.word	0x40000400

080027b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b087      	sub	sp, #28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	f023 0201 	bic.w	r2, r3, #1
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f023 030a 	bic.w	r3, r3, #10
 80027f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	621a      	str	r2, [r3, #32]
}
 8002806:	bf00      	nop
 8002808:	371c      	adds	r7, #28
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	f023 0210 	bic.w	r2, r3, #16
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800283a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	031b      	lsls	r3, r3, #12
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	4313      	orrs	r3, r2
 8002844:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800284c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	621a      	str	r2, [r3, #32]
}
 8002864:	bf00      	nop
 8002866:	371c      	adds	r7, #28
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr

0800286e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800286e:	b480      	push	{r7}
 8002870:	b085      	sub	sp, #20
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002884:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4313      	orrs	r3, r2
 800288c:	f043 0307 	orr.w	r3, r3, #7
 8002890:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	609a      	str	r2, [r3, #8]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr

080028a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b087      	sub	sp, #28
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	021a      	lsls	r2, r3, #8
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	431a      	orrs	r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	609a      	str	r2, [r3, #8]
}
 80028d6:	bf00      	nop
 80028d8:	371c      	adds	r7, #28
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e041      	b.n	800297c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a14      	ldr	r2, [pc, #80]	; (8002988 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d009      	beq.n	8002950 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002944:	d004      	beq.n	8002950 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a10      	ldr	r2, [pc, #64]	; (800298c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d10c      	bne.n	800296a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002956:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	4313      	orrs	r3, r2
 8002960:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40012c00 	.word	0x40012c00
 800298c:	40000400 	.word	0x40000400

08002990 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr

080029a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr

080029b4 <__libc_init_array>:
 80029b4:	b570      	push	{r4, r5, r6, lr}
 80029b6:	2600      	movs	r6, #0
 80029b8:	4d0c      	ldr	r5, [pc, #48]	; (80029ec <__libc_init_array+0x38>)
 80029ba:	4c0d      	ldr	r4, [pc, #52]	; (80029f0 <__libc_init_array+0x3c>)
 80029bc:	1b64      	subs	r4, r4, r5
 80029be:	10a4      	asrs	r4, r4, #2
 80029c0:	42a6      	cmp	r6, r4
 80029c2:	d109      	bne.n	80029d8 <__libc_init_array+0x24>
 80029c4:	f000 f822 	bl	8002a0c <_init>
 80029c8:	2600      	movs	r6, #0
 80029ca:	4d0a      	ldr	r5, [pc, #40]	; (80029f4 <__libc_init_array+0x40>)
 80029cc:	4c0a      	ldr	r4, [pc, #40]	; (80029f8 <__libc_init_array+0x44>)
 80029ce:	1b64      	subs	r4, r4, r5
 80029d0:	10a4      	asrs	r4, r4, #2
 80029d2:	42a6      	cmp	r6, r4
 80029d4:	d105      	bne.n	80029e2 <__libc_init_array+0x2e>
 80029d6:	bd70      	pop	{r4, r5, r6, pc}
 80029d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80029dc:	4798      	blx	r3
 80029de:	3601      	adds	r6, #1
 80029e0:	e7ee      	b.n	80029c0 <__libc_init_array+0xc>
 80029e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80029e6:	4798      	blx	r3
 80029e8:	3601      	adds	r6, #1
 80029ea:	e7f2      	b.n	80029d2 <__libc_init_array+0x1e>
 80029ec:	08002a44 	.word	0x08002a44
 80029f0:	08002a44 	.word	0x08002a44
 80029f4:	08002a44 	.word	0x08002a44
 80029f8:	08002a48 	.word	0x08002a48

080029fc <memset>:
 80029fc:	4603      	mov	r3, r0
 80029fe:	4402      	add	r2, r0
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d100      	bne.n	8002a06 <memset+0xa>
 8002a04:	4770      	bx	lr
 8002a06:	f803 1b01 	strb.w	r1, [r3], #1
 8002a0a:	e7f9      	b.n	8002a00 <memset+0x4>

08002a0c <_init>:
 8002a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a0e:	bf00      	nop
 8002a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a12:	bc08      	pop	{r3}
 8002a14:	469e      	mov	lr, r3
 8002a16:	4770      	bx	lr

08002a18 <_fini>:
 8002a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a1a:	bf00      	nop
 8002a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a1e:	bc08      	pop	{r3}
 8002a20:	469e      	mov	lr, r3
 8002a22:	4770      	bx	lr
